
Final_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000024f0  00002584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800086  00800086  000025aa  2**0
                  ALLOC
  3 .stab         000027e4  00000000  00000000  000025ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014f6  00000000  00000000  00004d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006286  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000063c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006536  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000817f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000906a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a9d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__vector_3>
      10:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__vector_8>
      24:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <main>
      8a:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *******************************************************************************/
/*
 * Description :
 * Functional responsible for Initialize the buzzer
 */
void Buzzer_init() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Buzzer_port, Buzzer_bin, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	65 e0       	ldi	r22, 0x05	; 5
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 ba 06 	call	0xd74	; 0xd74 <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_port, Buzzer_bin, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	65 e0       	ldi	r22, 0x05	; 5
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
/*
 * Description :
 * Functional responsible for setting buzzer bin to 1 buzzer on
 */
void Buzzer_on() {
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_port, Buzzer_bin, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	65 e0       	ldi	r22, 0x05	; 5
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
/*
 * Description :
 * Functional responsible for setting buzzer bin to 0 buzzer off
 */
void Buzzer_off() {
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_port, Buzzer_bin, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	65 e0       	ldi	r22, 0x05	; 5
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DcMotor_Init>:
 * Description :
 * The Function responsible for setup the direction for the two
 motor pins through the GPIO driver.
 *  Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	/* configure the motor pins as output pins */
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN0_ID, PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 ba 06 	call	0xd74	; 0xd74 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN1_ID, PIN_OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 ba 06 	call	0xd74	; 0xd74 <GPIO_setupPinDirection>
	/* Motor is stop at the beginning */
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN0_ID, LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>

}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DcMotor_Rotate>:
 * The function responsible for rotate the DC Motor CW/ or A-CW or
 stop the motor based on the state input state value.
 Send the required duty cycle to the PWM driver based on the
 required speed value.
 */
void DcMotor_Rotate(DC_state state, uint8 speed) {
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DcMotor_Rotate+0x6>
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	6a 83       	std	Y+2, r22	; 0x02
	//PWM_Timer0_Start(speed);
	if (state == clockwise) {
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	88 23       	and	r24, r24
     be0:	59 f4       	brne	.+22     	; 0xbf8 <DcMotor_Rotate+0x2a>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN0_ID, LOGIC_HIGH);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	41 e0       	ldi	r20, 0x01	; 1
     be8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_LOW);
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>
     bf6:	18 c0       	rjmp	.+48     	; 0xc28 <DcMotor_Rotate+0x5a>
	} else if (state == anticlockwise) {
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	59 f4       	brne	.+22     	; 0xc14 <DcMotor_Rotate+0x46>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN0_ID, LOGIC_LOW);
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_HIGH);
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>
     c12:	0a c0       	rjmp	.+20     	; 0xc28 <DcMotor_Rotate+0x5a>
	} else {
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN0_ID, LOGIC_LOW);
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_LOW);
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_writePin>
	}
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	00 d0       	rcall	.+0      	; 0xc38 <EEPROM_writeByte+0x6>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <EEPROM_writeByte+0x8>
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c44:	0e 94 a0 10 	call	0x2140	; 0x2140 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c48:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_getStatus>
     c4c:	88 30       	cpi	r24, 0x08	; 8
     c4e:	11 f0       	breq	.+4      	; 0xc54 <EEPROM_writeByte+0x22>
        return ERROR;
     c50:	1c 82       	std	Y+4, r1	; 0x04
     c52:	28 c0       	rjmp	.+80     	; 0xca4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	80 70       	andi	r24, 0x00	; 0
     c5a:	97 70       	andi	r25, 0x07	; 7
     c5c:	88 0f       	add	r24, r24
     c5e:	89 2f       	mov	r24, r25
     c60:	88 1f       	adc	r24, r24
     c62:	99 0b       	sbc	r25, r25
     c64:	91 95       	neg	r25
     c66:	80 6a       	ori	r24, 0xA0	; 160
     c68:	0e 94 bb 10 	call	0x2176	; 0x2176 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c6c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_getStatus>
     c70:	88 31       	cpi	r24, 0x18	; 24
     c72:	11 f0       	breq	.+4      	; 0xc78 <EEPROM_writeByte+0x46>
        return ERROR; 
     c74:	1c 82       	std	Y+4, r1	; 0x04
     c76:	16 c0       	rjmp	.+44     	; 0xca4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	0e 94 bb 10 	call	0x2176	; 0x2176 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c7e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_getStatus>
     c82:	88 32       	cpi	r24, 0x28	; 40
     c84:	11 f0       	breq	.+4      	; 0xc8a <EEPROM_writeByte+0x58>
        return ERROR;
     c86:	1c 82       	std	Y+4, r1	; 0x04
     c88:	0d c0       	rjmp	.+26     	; 0xca4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	0e 94 bb 10 	call	0x2176	; 0x2176 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c90:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_getStatus>
     c94:	88 32       	cpi	r24, 0x28	; 40
     c96:	11 f0       	breq	.+4      	; 0xc9c <EEPROM_writeByte+0x6a>
        return ERROR;
     c98:	1c 82       	std	Y+4, r1	; 0x04
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     c9c:	0e 94 b0 10 	call	0x2160	; 0x2160 <TWI_stop>
	
    return SUCCESS;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	8c 83       	std	Y+4, r24	; 0x04
     ca4:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	00 d0       	rcall	.+0      	; 0xcba <EEPROM_readByte+0x6>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <EEPROM_readByte+0x8>
     cbc:	0f 92       	push	r0
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	9a 83       	std	Y+2, r25	; 0x02
     cc4:	89 83       	std	Y+1, r24	; 0x01
     cc6:	7c 83       	std	Y+4, r23	; 0x04
     cc8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     cca:	0e 94 a0 10 	call	0x2140	; 0x2140 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     cce:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_getStatus>
     cd2:	88 30       	cpi	r24, 0x08	; 8
     cd4:	11 f0       	breq	.+4      	; 0xcda <EEPROM_readByte+0x26>
        return ERROR;
     cd6:	1d 82       	std	Y+5, r1	; 0x05
     cd8:	44 c0       	rjmp	.+136    	; 0xd62 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	80 70       	andi	r24, 0x00	; 0
     ce0:	97 70       	andi	r25, 0x07	; 7
     ce2:	88 0f       	add	r24, r24
     ce4:	89 2f       	mov	r24, r25
     ce6:	88 1f       	adc	r24, r24
     ce8:	99 0b       	sbc	r25, r25
     cea:	91 95       	neg	r25
     cec:	80 6a       	ori	r24, 0xA0	; 160
     cee:	0e 94 bb 10 	call	0x2176	; 0x2176 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     cf2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_getStatus>
     cf6:	88 31       	cpi	r24, 0x18	; 24
     cf8:	11 f0       	breq	.+4      	; 0xcfe <EEPROM_readByte+0x4a>
        return ERROR;
     cfa:	1d 82       	std	Y+5, r1	; 0x05
     cfc:	32 c0       	rjmp	.+100    	; 0xd62 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	0e 94 bb 10 	call	0x2176	; 0x2176 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d04:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_getStatus>
     d08:	88 32       	cpi	r24, 0x28	; 40
     d0a:	11 f0       	breq	.+4      	; 0xd10 <EEPROM_readByte+0x5c>
        return ERROR;
     d0c:	1d 82       	std	Y+5, r1	; 0x05
     d0e:	29 c0       	rjmp	.+82     	; 0xd62 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d10:	0e 94 a0 10 	call	0x2140	; 0x2140 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     d14:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_getStatus>
     d18:	80 31       	cpi	r24, 0x10	; 16
     d1a:	11 f0       	breq	.+4      	; 0xd20 <EEPROM_readByte+0x6c>
        return ERROR;
     d1c:	1d 82       	std	Y+5, r1	; 0x05
     d1e:	21 c0       	rjmp	.+66     	; 0xd62 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	80 70       	andi	r24, 0x00	; 0
     d26:	97 70       	andi	r25, 0x07	; 7
     d28:	88 0f       	add	r24, r24
     d2a:	89 2f       	mov	r24, r25
     d2c:	88 1f       	adc	r24, r24
     d2e:	99 0b       	sbc	r25, r25
     d30:	91 95       	neg	r25
     d32:	81 6a       	ori	r24, 0xA1	; 161
     d34:	0e 94 bb 10 	call	0x2176	; 0x2176 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d38:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_getStatus>
     d3c:	80 34       	cpi	r24, 0x40	; 64
     d3e:	11 f0       	breq	.+4      	; 0xd44 <EEPROM_readByte+0x90>
        return ERROR;
     d40:	1d 82       	std	Y+5, r1	; 0x05
     d42:	0f c0       	rjmp	.+30     	; 0xd62 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     d44:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_readByteWithNACK>
     d48:	eb 81       	ldd	r30, Y+3	; 0x03
     d4a:	fc 81       	ldd	r31, Y+4	; 0x04
     d4c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     d4e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_getStatus>
     d52:	88 35       	cpi	r24, 0x58	; 88
     d54:	11 f0       	breq	.+4      	; 0xd5a <EEPROM_readByte+0xa6>
        return ERROR;
     d56:	1d 82       	std	Y+5, r1	; 0x05
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d5a:	0e 94 b0 10 	call	0x2160	; 0x2160 <TWI_stop>

    return SUCCESS;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8d 83       	std	Y+5, r24	; 0x05
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <GPIO_setupPinDirection+0x6>
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <GPIO_setupPinDirection+0x8>
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	6a 83       	std	Y+2, r22	; 0x02
     d86:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	88 30       	cpi	r24, 0x08	; 8
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <GPIO_setupPinDirection+0x1c>
     d8e:	d5 c0       	rjmp	.+426    	; 0xf3a <GPIO_setupPinDirection+0x1c6>
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	84 30       	cpi	r24, 0x04	; 4
     d94:	08 f0       	brcs	.+2      	; 0xd98 <GPIO_setupPinDirection+0x24>
     d96:	d1 c0       	rjmp	.+418    	; 0xf3a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	3d 83       	std	Y+5, r19	; 0x05
     da0:	2c 83       	std	Y+4, r18	; 0x04
     da2:	8c 81       	ldd	r24, Y+4	; 0x04
     da4:	9d 81       	ldd	r25, Y+5	; 0x05
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	91 05       	cpc	r25, r1
     daa:	09 f4       	brne	.+2      	; 0xdae <GPIO_setupPinDirection+0x3a>
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <GPIO_setupPinDirection+0xc0>
     dae:	2c 81       	ldd	r18, Y+4	; 0x04
     db0:	3d 81       	ldd	r19, Y+5	; 0x05
     db2:	22 30       	cpi	r18, 0x02	; 2
     db4:	31 05       	cpc	r19, r1
     db6:	2c f4       	brge	.+10     	; 0xdc2 <GPIO_setupPinDirection+0x4e>
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	9d 81       	ldd	r25, Y+5	; 0x05
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	71 f0       	breq	.+28     	; 0xddc <GPIO_setupPinDirection+0x68>
     dc0:	bc c0       	rjmp	.+376    	; 0xf3a <GPIO_setupPinDirection+0x1c6>
     dc2:	2c 81       	ldd	r18, Y+4	; 0x04
     dc4:	3d 81       	ldd	r19, Y+5	; 0x05
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	09 f4       	brne	.+2      	; 0xdce <GPIO_setupPinDirection+0x5a>
     dcc:	5f c0       	rjmp	.+190    	; 0xe8c <GPIO_setupPinDirection+0x118>
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	91 05       	cpc	r25, r1
     dd6:	09 f4       	brne	.+2      	; 0xdda <GPIO_setupPinDirection+0x66>
     dd8:	85 c0       	rjmp	.+266    	; 0xee4 <GPIO_setupPinDirection+0x170>
     dda:	af c0       	rjmp	.+350    	; 0xf3a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     de2:	aa e3       	ldi	r26, 0x3A	; 58
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ea e3       	ldi	r30, 0x3A	; 58
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_setupPinDirection+0x8c>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_setupPinDirection+0x88>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	98 c0       	rjmp	.+304    	; 0xf3a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e0a:	aa e3       	ldi	r26, 0x3A	; 58
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	ea e3       	ldi	r30, 0x3A	; 58
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_setupPinDirection+0xb4>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_setupPinDirection+0xb0>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	83 c0       	rjmp	.+262    	; 0xf3a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e3a:	a7 e3       	ldi	r26, 0x37	; 55
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_setupPinDirection+0xe4>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_setupPinDirection+0xe0>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	6c c0       	rjmp	.+216    	; 0xf3a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e62:	a7 e3       	ldi	r26, 0x37	; 55
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e3       	ldi	r30, 0x37	; 55
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_setupPinDirection+0x10c>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_setupPinDirection+0x108>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	57 c0       	rjmp	.+174    	; 0xf3a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e92:	a4 e3       	ldi	r26, 0x34	; 52
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e4 e3       	ldi	r30, 0x34	; 52
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_setupPinDirection+0x13c>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_setupPinDirection+0x138>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	40 c0       	rjmp	.+128    	; 0xf3a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     eba:	a4 e3       	ldi	r26, 0x34	; 52
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e4 e3       	ldi	r30, 0x34	; 52
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_setupPinDirection+0x164>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_setupPinDirection+0x160>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	2b c0       	rjmp	.+86     	; 0xf3a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	a1 f4       	brne	.+40     	; 0xf12 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     eea:	a1 e3       	ldi	r26, 0x31	; 49
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e1 e3       	ldi	r30, 0x31	; 49
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <GPIO_setupPinDirection+0x194>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <GPIO_setupPinDirection+0x190>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	14 c0       	rjmp	.+40     	; 0xf3a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f12:	a1 e3       	ldi	r26, 0x31	; 49
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e1 e3       	ldi	r30, 0x31	; 49
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <GPIO_setupPinDirection+0x1bc>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <GPIO_setupPinDirection+0x1b8>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <GPIO_writePin+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <GPIO_writePin+0x8>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	6a 83       	std	Y+2, r22	; 0x02
     f5c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	88 30       	cpi	r24, 0x08	; 8
     f62:	08 f0       	brcs	.+2      	; 0xf66 <GPIO_writePin+0x1c>
     f64:	d5 c0       	rjmp	.+426    	; 0x1110 <GPIO_writePin+0x1c6>
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <GPIO_writePin+0x24>
     f6c:	d1 c0       	rjmp	.+418    	; 0x1110 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3d 83       	std	Y+5, r19	; 0x05
     f76:	2c 83       	std	Y+4, r18	; 0x04
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <GPIO_writePin+0x3a>
     f82:	43 c0       	rjmp	.+134    	; 0x100a <GPIO_writePin+0xc0>
     f84:	2c 81       	ldd	r18, Y+4	; 0x04
     f86:	3d 81       	ldd	r19, Y+5	; 0x05
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	2c f4       	brge	.+10     	; 0xf98 <GPIO_writePin+0x4e>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	71 f0       	breq	.+28     	; 0xfb2 <GPIO_writePin+0x68>
     f96:	bc c0       	rjmp	.+376    	; 0x1110 <GPIO_writePin+0x1c6>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <GPIO_writePin+0x5a>
     fa2:	5f c0       	rjmp	.+190    	; 0x1062 <GPIO_writePin+0x118>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	91 05       	cpc	r25, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <GPIO_writePin+0x66>
     fae:	85 c0       	rjmp	.+266    	; 0x10ba <GPIO_writePin+0x170>
     fb0:	af c0       	rjmp	.+350    	; 0x1110 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	a1 f4       	brne	.+40     	; 0xfe0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fb8:	ab e3       	ldi	r26, 0x3B	; 59
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	eb e3       	ldi	r30, 0x3B	; 59
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <GPIO_writePin+0x8c>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <GPIO_writePin+0x88>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	98 c0       	rjmp	.+304    	; 0x1110 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fe0:	ab e3       	ldi	r26, 0x3B	; 59
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	eb e3       	ldi	r30, 0x3B	; 59
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_writePin+0xb4>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_writePin+0xb0>
    1002:	80 95       	com	r24
    1004:	84 23       	and	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	83 c0       	rjmp	.+262    	; 0x1110 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	a1 f4       	brne	.+40     	; 0x1038 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1010:	a8 e3       	ldi	r26, 0x38	; 56
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e8 e3       	ldi	r30, 0x38	; 56
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <GPIO_writePin+0xe4>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <GPIO_writePin+0xe0>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	6c c0       	rjmp	.+216    	; 0x1110 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1038:	a8 e3       	ldi	r26, 0x38	; 56
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <GPIO_writePin+0x10c>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <GPIO_writePin+0x108>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	57 c0       	rjmp	.+174    	; 0x1110 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	a1 f4       	brne	.+40     	; 0x1090 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1068:	a5 e3       	ldi	r26, 0x35	; 53
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e3       	ldi	r30, 0x35	; 53
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <GPIO_writePin+0x13c>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <GPIO_writePin+0x138>
    108a:	84 2b       	or	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	40 c0       	rjmp	.+128    	; 0x1110 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1090:	a5 e3       	ldi	r26, 0x35	; 53
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e3       	ldi	r30, 0x35	; 53
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <GPIO_writePin+0x164>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <GPIO_writePin+0x160>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	2b c0       	rjmp	.+86     	; 0x1110 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	a1 f4       	brne	.+40     	; 0x10e8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10c0:	a2 e3       	ldi	r26, 0x32	; 50
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e2 e3       	ldi	r30, 0x32	; 50
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_writePin+0x194>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_writePin+0x190>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	14 c0       	rjmp	.+40     	; 0x1110 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10e8:	a2 e3       	ldi	r26, 0x32	; 50
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e2 e3       	ldi	r30, 0x32	; 50
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <GPIO_writePin+0x1bc>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <GPIO_writePin+0x1b8>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <GPIO_readPin+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <GPIO_readPin+0x8>
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	8a 83       	std	Y+2, r24	; 0x02
    1130:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1132:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 30       	cpi	r24, 0x08	; 8
    1138:	08 f0       	brcs	.+2      	; 0x113c <GPIO_readPin+0x1c>
    113a:	84 c0       	rjmp	.+264    	; 0x1244 <GPIO_readPin+0x124>
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	08 f0       	brcs	.+2      	; 0x1144 <GPIO_readPin+0x24>
    1142:	80 c0       	rjmp	.+256    	; 0x1244 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	3d 83       	std	Y+5, r19	; 0x05
    114c:	2c 83       	std	Y+4, r18	; 0x04
    114e:	4c 81       	ldd	r20, Y+4	; 0x04
    1150:	5d 81       	ldd	r21, Y+5	; 0x05
    1152:	41 30       	cpi	r20, 0x01	; 1
    1154:	51 05       	cpc	r21, r1
    1156:	79 f1       	breq	.+94     	; 0x11b6 <GPIO_readPin+0x96>
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	91 05       	cpc	r25, r1
    1160:	34 f4       	brge	.+12     	; 0x116e <GPIO_readPin+0x4e>
    1162:	2c 81       	ldd	r18, Y+4	; 0x04
    1164:	3d 81       	ldd	r19, Y+5	; 0x05
    1166:	21 15       	cp	r18, r1
    1168:	31 05       	cpc	r19, r1
    116a:	69 f0       	breq	.+26     	; 0x1186 <GPIO_readPin+0x66>
    116c:	6b c0       	rjmp	.+214    	; 0x1244 <GPIO_readPin+0x124>
    116e:	4c 81       	ldd	r20, Y+4	; 0x04
    1170:	5d 81       	ldd	r21, Y+5	; 0x05
    1172:	42 30       	cpi	r20, 0x02	; 2
    1174:	51 05       	cpc	r21, r1
    1176:	b9 f1       	breq	.+110    	; 0x11e6 <GPIO_readPin+0xc6>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <GPIO_readPin+0x64>
    1182:	49 c0       	rjmp	.+146    	; 0x1216 <GPIO_readPin+0xf6>
    1184:	5f c0       	rjmp	.+190    	; 0x1244 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1186:	e9 e3       	ldi	r30, 0x39	; 57
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a9 01       	movw	r20, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <GPIO_readPin+0x7e>
    119a:	55 95       	asr	r21
    119c:	47 95       	ror	r20
    119e:	8a 95       	dec	r24
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <GPIO_readPin+0x7a>
    11a2:	ca 01       	movw	r24, r20
    11a4:	81 70       	andi	r24, 0x01	; 1
    11a6:	90 70       	andi	r25, 0x00	; 0
    11a8:	88 23       	and	r24, r24
    11aa:	19 f0       	breq	.+6      	; 0x11b2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	49 c0       	rjmp	.+146    	; 0x1244 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	47 c0       	rjmp	.+142    	; 0x1244 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11b6:	e6 e3       	ldi	r30, 0x36	; 54
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <GPIO_readPin+0xae>
    11ca:	55 95       	asr	r21
    11cc:	47 95       	ror	r20
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <GPIO_readPin+0xaa>
    11d2:	ca 01       	movw	r24, r20
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	90 70       	andi	r25, 0x00	; 0
    11d8:	88 23       	and	r24, r24
    11da:	19 f0       	breq	.+6      	; 0x11e2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	31 c0       	rjmp	.+98     	; 0x1244 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11e2:	19 82       	std	Y+1, r1	; 0x01
    11e4:	2f c0       	rjmp	.+94     	; 0x1244 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11e6:	e3 e3       	ldi	r30, 0x33	; 51
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a9 01       	movw	r20, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <GPIO_readPin+0xde>
    11fa:	55 95       	asr	r21
    11fc:	47 95       	ror	r20
    11fe:	8a 95       	dec	r24
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <GPIO_readPin+0xda>
    1202:	ca 01       	movw	r24, r20
    1204:	81 70       	andi	r24, 0x01	; 1
    1206:	90 70       	andi	r25, 0x00	; 0
    1208:	88 23       	and	r24, r24
    120a:	19 f0       	breq	.+6      	; 0x1212 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	19 c0       	rjmp	.+50     	; 0x1244 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1212:	19 82       	std	Y+1, r1	; 0x01
    1214:	17 c0       	rjmp	.+46     	; 0x1244 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1216:	e0 e3       	ldi	r30, 0x30	; 48
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	88 2f       	mov	r24, r24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	a9 01       	movw	r20, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <GPIO_readPin+0x10e>
    122a:	55 95       	asr	r21
    122c:	47 95       	ror	r20
    122e:	8a 95       	dec	r24
    1230:	e2 f7       	brpl	.-8      	; 0x122a <GPIO_readPin+0x10a>
    1232:	ca 01       	movw	r24, r20
    1234:	81 70       	andi	r24, 0x01	; 1
    1236:	90 70       	andi	r25, 0x00	; 0
    1238:	88 23       	and	r24, r24
    123a:	19 f0       	breq	.+6      	; 0x1242 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1242:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1244:	89 81       	ldd	r24, Y+1	; 0x01
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <GPIO_setupPortDirection+0x6>
    125c:	00 d0       	rcall	.+0      	; 0x125e <GPIO_setupPortDirection+0x8>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	90 f5       	brcc	.+100    	; 0x12d0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3c 83       	std	Y+4, r19	; 0x04
    1274:	2b 83       	std	Y+3, r18	; 0x03
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	91 05       	cpc	r25, r1
    127e:	d1 f0       	breq	.+52     	; 0x12b4 <GPIO_setupPortDirection+0x5e>
    1280:	2b 81       	ldd	r18, Y+3	; 0x03
    1282:	3c 81       	ldd	r19, Y+4	; 0x04
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	2c f4       	brge	.+10     	; 0x1294 <GPIO_setupPortDirection+0x3e>
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	61 f0       	breq	.+24     	; 0x12aa <GPIO_setupPortDirection+0x54>
    1292:	1e c0       	rjmp	.+60     	; 0x12d0 <GPIO_setupPortDirection+0x7a>
    1294:	2b 81       	ldd	r18, Y+3	; 0x03
    1296:	3c 81       	ldd	r19, Y+4	; 0x04
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	81 f0       	breq	.+32     	; 0x12be <GPIO_setupPortDirection+0x68>
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	91 05       	cpc	r25, r1
    12a6:	81 f0       	breq	.+32     	; 0x12c8 <GPIO_setupPortDirection+0x72>
    12a8:	13 c0       	rjmp	.+38     	; 0x12d0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12aa:	ea e3       	ldi	r30, 0x3A	; 58
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	80 83       	st	Z, r24
    12b2:	0e c0       	rjmp	.+28     	; 0x12d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12b4:	e7 e3       	ldi	r30, 0x37	; 55
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	80 83       	st	Z, r24
    12bc:	09 c0       	rjmp	.+18     	; 0x12d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12be:	e4 e3       	ldi	r30, 0x34	; 52
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 83       	st	Z, r24
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12c8:	e1 e3       	ldi	r30, 0x31	; 49
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	80 83       	st	Z, r24
			break;
		}
	}
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <GPIO_writePort+0x6>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <GPIO_writePort+0x8>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	84 30       	cpi	r24, 0x04	; 4
    12f2:	90 f5       	brcc	.+100    	; 0x1358 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3c 83       	std	Y+4, r19	; 0x04
    12fc:	2b 83       	std	Y+3, r18	; 0x03
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	91 05       	cpc	r25, r1
    1306:	d1 f0       	breq	.+52     	; 0x133c <GPIO_writePort+0x5e>
    1308:	2b 81       	ldd	r18, Y+3	; 0x03
    130a:	3c 81       	ldd	r19, Y+4	; 0x04
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	2c f4       	brge	.+10     	; 0x131c <GPIO_writePort+0x3e>
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	61 f0       	breq	.+24     	; 0x1332 <GPIO_writePort+0x54>
    131a:	1e c0       	rjmp	.+60     	; 0x1358 <GPIO_writePort+0x7a>
    131c:	2b 81       	ldd	r18, Y+3	; 0x03
    131e:	3c 81       	ldd	r19, Y+4	; 0x04
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	81 f0       	breq	.+32     	; 0x1346 <GPIO_writePort+0x68>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	91 05       	cpc	r25, r1
    132e:	81 f0       	breq	.+32     	; 0x1350 <GPIO_writePort+0x72>
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1332:	eb e3       	ldi	r30, 0x3B	; 59
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	80 83       	st	Z, r24
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1346:	e5 e3       	ldi	r30, 0x35	; 53
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1350:	e2 e3       	ldi	r30, 0x32	; 50
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	80 83       	st	Z, r24
			break;
		}
	}
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <GPIO_readPort+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <GPIO_readPort+0x8>
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1374:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	84 30       	cpi	r24, 0x04	; 4
    137a:	90 f5       	brcc	.+100    	; 0x13e0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3c 83       	std	Y+4, r19	; 0x04
    1384:	2b 83       	std	Y+3, r18	; 0x03
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	91 05       	cpc	r25, r1
    138e:	d1 f0       	breq	.+52     	; 0x13c4 <GPIO_readPort+0x5e>
    1390:	2b 81       	ldd	r18, Y+3	; 0x03
    1392:	3c 81       	ldd	r19, Y+4	; 0x04
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	2c f4       	brge	.+10     	; 0x13a4 <GPIO_readPort+0x3e>
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	61 f0       	breq	.+24     	; 0x13ba <GPIO_readPort+0x54>
    13a2:	1e c0       	rjmp	.+60     	; 0x13e0 <GPIO_readPort+0x7a>
    13a4:	2b 81       	ldd	r18, Y+3	; 0x03
    13a6:	3c 81       	ldd	r19, Y+4	; 0x04
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <GPIO_readPort+0x68>
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	81 f0       	breq	.+32     	; 0x13d8 <GPIO_readPort+0x72>
    13b8:	13 c0       	rjmp	.+38     	; 0x13e0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    13ba:	e9 e3       	ldi	r30, 0x39	; 57
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	0e c0       	rjmp	.+28     	; 0x13e0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13c4:	e6 e3       	ldi	r30, 0x36	; 54
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13ce:	e3 e3       	ldi	r30, 0x33	; 51
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13d8:	e0 e3       	ldi	r30, 0x30	; 48
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <main>:
uint8 new_pass[array_size];
uint8 pass_1[array_size];
/*******************************************************************************
 *                               APPlication                                 *
 *******************************************************************************/
int main(void) {
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	a4 97       	sbiw	r28, 0x24	; 36
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1 << 7); //enable global interrupt enable
    1404:	af e5       	ldi	r26, 0x5F	; 95
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ef e5       	ldi	r30, 0x5F	; 95
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	80 68       	ori	r24, 0x80	; 128
    1410:	8c 93       	st	X, r24
	UART_ConfigType uart = { Disable, one_bit, Eight_bits, rate7 };
    1412:	9e 01       	movw	r18, r28
    1414:	2e 5f       	subi	r18, 0xFE	; 254
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	3f 8b       	std	Y+23, r19	; 0x17
    141a:	2e 8b       	std	Y+22, r18	; 0x16
    141c:	83 e7       	ldi	r24, 0x73	; 115
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	99 8f       	std	Y+25, r25	; 0x19
    1422:	88 8f       	std	Y+24, r24	; 0x18
    1424:	97 e0       	ldi	r25, 0x07	; 7
    1426:	9a 8f       	std	Y+26, r25	; 0x1a
    1428:	e8 8d       	ldd	r30, Y+24	; 0x18
    142a:	f9 8d       	ldd	r31, Y+25	; 0x19
    142c:	00 80       	ld	r0, Z
    142e:	28 8d       	ldd	r18, Y+24	; 0x18
    1430:	39 8d       	ldd	r19, Y+25	; 0x19
    1432:	2f 5f       	subi	r18, 0xFF	; 255
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	39 8f       	std	Y+25, r19	; 0x19
    1438:	28 8f       	std	Y+24, r18	; 0x18
    143a:	ee 89       	ldd	r30, Y+22	; 0x16
    143c:	ff 89       	ldd	r31, Y+23	; 0x17
    143e:	00 82       	st	Z, r0
    1440:	2e 89       	ldd	r18, Y+22	; 0x16
    1442:	3f 89       	ldd	r19, Y+23	; 0x17
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	3f 8b       	std	Y+23, r19	; 0x17
    144a:	2e 8b       	std	Y+22, r18	; 0x16
    144c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    144e:	31 50       	subi	r19, 0x01	; 1
    1450:	3a 8f       	std	Y+26, r19	; 0x1a
    1452:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1454:	88 23       	and	r24, r24
    1456:	41 f7       	brne	.-48     	; 0x1428 <main+0x38>
	TWI_ConfigType twi = { Fast, 1 };
    1458:	fe 01       	movw	r30, r28
    145a:	39 96       	adiw	r30, 0x09	; 9
    145c:	fc 8f       	std	Y+28, r31	; 0x1c
    145e:	eb 8f       	std	Y+27, r30	; 0x1b
    1460:	2e e6       	ldi	r18, 0x6E	; 110
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	3e 8f       	std	Y+30, r19	; 0x1e
    1466:	2d 8f       	std	Y+29, r18	; 0x1d
    1468:	35 e0       	ldi	r19, 0x05	; 5
    146a:	3f 8f       	std	Y+31, r19	; 0x1f
    146c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    146e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1470:	00 80       	ld	r0, Z
    1472:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1474:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1476:	2f 5f       	subi	r18, 0xFF	; 255
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	3e 8f       	std	Y+30, r19	; 0x1e
    147c:	2d 8f       	std	Y+29, r18	; 0x1d
    147e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1480:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1482:	00 82       	st	Z, r0
    1484:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1486:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	3c 8f       	std	Y+28, r19	; 0x1c
    148e:	2b 8f       	std	Y+27, r18	; 0x1b
    1490:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1492:	31 50       	subi	r19, 0x01	; 1
    1494:	3f 8f       	std	Y+31, r19	; 0x1f
    1496:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1498:	88 23       	and	r24, r24
    149a:	41 f7       	brne	.-48     	; 0x146c <main+0x7c>
	TWI_init(&twi); //initialize I2C
    149c:	ce 01       	movw	r24, r28
    149e:	09 96       	adiw	r24, 0x09	; 9
    14a0:	0e 94 68 10 	call	0x20d0	; 0x20d0 <TWI_init>
	UART_init(&uart); //initialize UART
    14a4:	ce 01       	movw	r24, r28
    14a6:	02 96       	adiw	r24, 0x02	; 2
    14a8:	0e 94 07 11 	call	0x220e	; 0x220e <UART_init>
	DcMotor_Init(); //initialize motor
    14ac:	0e 94 cc 05 	call	0xb98	; 0xb98 <DcMotor_Init>
	DC_state state = { stop }; //motor is stoped at first
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	89 83       	std	Y+1, r24	; 0x01
	DcMotor_Rotate(state, 100);
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	64 e6       	ldi	r22, 0x64	; 100
    14b8:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
	Buzzer_init(); //initialize buzzer
    14bc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	g_step = 0;
    14c0:	10 92 92 00 	sts	0x0092, r1
	while (1) {
		switch (g_step) {
    14c4:	80 91 92 00 	lds	r24, 0x0092
    14c8:	e8 2f       	mov	r30, r24
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	fd 8b       	std	Y+21, r31	; 0x15
    14ce:	ec 8b       	std	Y+20, r30	; 0x14
    14d0:	2c 89       	ldd	r18, Y+20	; 0x14
    14d2:	3d 89       	ldd	r19, Y+21	; 0x15
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	b9 f1       	breq	.+110    	; 0x1548 <main+0x158>
    14da:	8c 89       	ldd	r24, Y+20	; 0x14
    14dc:	9d 89       	ldd	r25, Y+21	; 0x15
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	54 f4       	brge	.+20     	; 0x14f8 <main+0x108>
    14e4:	ec 89       	ldd	r30, Y+20	; 0x14
    14e6:	fd 89       	ldd	r31, Y+21	; 0x15
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	c1 f0       	breq	.+48     	; 0x151c <main+0x12c>
    14ec:	2c 89       	ldd	r18, Y+20	; 0x14
    14ee:	3d 89       	ldd	r19, Y+21	; 0x15
    14f0:	21 30       	cpi	r18, 0x01	; 1
    14f2:	31 05       	cpc	r19, r1
    14f4:	09 f1       	breq	.+66     	; 0x1538 <main+0x148>
    14f6:	e6 cf       	rjmp	.-52     	; 0x14c4 <main+0xd4>
    14f8:	8c 89       	ldd	r24, Y+20	; 0x14
    14fa:	9d 89       	ldd	r25, Y+21	; 0x15
    14fc:	84 30       	cpi	r24, 0x04	; 4
    14fe:	91 05       	cpc	r25, r1
    1500:	09 f4       	brne	.+2      	; 0x1504 <main+0x114>
    1502:	6c c0       	rjmp	.+216    	; 0x15dc <main+0x1ec>
    1504:	ec 89       	ldd	r30, Y+20	; 0x14
    1506:	fd 89       	ldd	r31, Y+21	; 0x15
    1508:	e4 30       	cpi	r30, 0x04	; 4
    150a:	f1 05       	cpc	r31, r1
    150c:	ac f1       	brlt	.+106    	; 0x1578 <main+0x188>
    150e:	2c 89       	ldd	r18, Y+20	; 0x14
    1510:	3d 89       	ldd	r19, Y+21	; 0x15
    1512:	25 30       	cpi	r18, 0x05	; 5
    1514:	31 05       	cpc	r19, r1
    1516:	09 f4       	brne	.+2      	; 0x151a <main+0x12a>
    1518:	95 c0       	rjmp	.+298    	; 0x1644 <main+0x254>
    151a:	d4 cf       	rjmp	.-88     	; 0x14c4 <main+0xd4>
		/*step 0:
		 * The project opened for the first time and there is no password saved in EEPROM or when changing password
		 */
		case 0:
			recieve_confirmPassword();
    151c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <recieve_confirmPassword>
			UART_sendByte(MC2_READY);
    1520:	80 e1       	ldi	r24, 0x10	; 16
    1522:	0e 94 8b 11 	call	0x2316	; 0x2316 <UART_sendByte>
			/*receive the step from MCU1 determines in which step the code go */
			checker = UART_recieveByte();
    1526:	0e 94 a2 11 	call	0x2344	; 0x2344 <UART_recieveByte>
    152a:	80 93 98 00 	sts	0x0098, r24
			g_step = checker;
    152e:	80 91 98 00 	lds	r24, 0x0098
    1532:	80 93 92 00 	sts	0x0092, r24
    1536:	c6 cf       	rjmp	.-116    	; 0x14c4 <main+0xd4>
			break;
			/*step 1:
			 * The two password matched so password is saved in EEPROM
			 */
		case 1:
			save_Password(pass_1);
    1538:	8d e8       	ldi	r24, 0x8D	; 141
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 98 0b 	call	0x1730	; 0x1730 <save_Password>
			g_step = 2;
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	80 93 92 00 	sts	0x0092, r24
    1546:	be cf       	rjmp	.-132    	; 0x14c4 <main+0xd4>
			 * Receive the choosed option
			 * go to the required step
			 */
		case 2:
			/*receive the symbol from MCU1 determines in which step the code go */
			UART_sendByte(MC2_READY);
    1548:	80 e1       	ldi	r24, 0x10	; 16
    154a:	0e 94 8b 11 	call	0x2316	; 0x2316 <UART_sendByte>
			sym = UART_recieveByte();
    154e:	0e 94 a2 11 	call	0x2344	; 0x2344 <UART_recieveByte>
    1552:	80 93 9d 00 	sts	0x009D, r24

			if (sym == '+') {
    1556:	80 91 9d 00 	lds	r24, 0x009D
    155a:	8b 32       	cpi	r24, 0x2B	; 43
    155c:	21 f4       	brne	.+8      	; 0x1566 <main+0x176>
				g_step = 3;
    155e:	83 e0       	ldi	r24, 0x03	; 3
    1560:	80 93 92 00 	sts	0x0092, r24
    1564:	af cf       	rjmp	.-162    	; 0x14c4 <main+0xd4>
			} else if (sym == '-') {
    1566:	80 91 9d 00 	lds	r24, 0x009D
    156a:	8d 32       	cpi	r24, 0x2D	; 45
    156c:	09 f0       	breq	.+2      	; 0x1570 <main+0x180>
    156e:	aa cf       	rjmp	.-172    	; 0x14c4 <main+0xd4>
				g_step = 4;
    1570:	84 e0       	ldi	r24, 0x04	; 4
    1572:	80 93 92 00 	sts	0x0092, r24
    1576:	a6 cf       	rjmp	.-180    	; 0x14c4 <main+0xd4>
			 *  To open the door check password with eeprom
			 * if unmatched for 3 time go to step 5
			 * if matched open the door
			 * */
		case 3:
			recieve_Password();
    1578:	0e 94 56 0b 	call	0x16ac	; 0x16ac <recieve_Password>
			result = check_with_EEPROM(new_pass, pass_1); // check password with the EEPROM
    157c:	83 e9       	ldi	r24, 0x93	; 147
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	2d e8       	ldi	r18, 0x8D	; 141
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	b9 01       	movw	r22, r18
    1586:	0e 94 3b 0c 	call	0x1876	; 0x1876 <check_with_EEPROM>
    158a:	80 93 9b 00 	sts	0x009B, r24
			UART_sendByte(result); // result of check match or mismatch
    158e:	80 91 9b 00 	lds	r24, 0x009B
    1592:	0e 94 8b 11 	call	0x2316	; 0x2316 <UART_sendByte>
			if (result == 0) { // password mismatch
    1596:	80 91 9b 00 	lds	r24, 0x009B
    159a:	88 23       	and	r24, r24
    159c:	89 f4       	brne	.+34     	; 0x15c0 <main+0x1d0>
				counter_trial++;
    159e:	80 91 86 00 	lds	r24, 0x0086
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	80 93 86 00 	sts	0x0086, r24
				if (counter_trial == 3) {
    15a8:	80 91 86 00 	lds	r24, 0x0086
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	19 f4       	brne	.+6      	; 0x15b6 <main+0x1c6>
					g_step = 5; // step of buzzer on when password mismatch for 3 times
    15b0:	85 e0       	ldi	r24, 0x05	; 5
    15b2:	80 93 92 00 	sts	0x0092, r24
				}
				UART_sendByte(g_step);
    15b6:	80 91 92 00 	lds	r24, 0x0092
    15ba:	0e 94 8b 11 	call	0x2316	; 0x2316 <UART_sendByte>
    15be:	82 cf       	rjmp	.-252    	; 0x14c4 <main+0xd4>
			} else if (result == 1) { // password match
    15c0:	80 91 9b 00 	lds	r24, 0x009B
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	09 f0       	breq	.+2      	; 0x15ca <main+0x1da>
    15c8:	7d cf       	rjmp	.-262    	; 0x14c4 <main+0xd4>
				open_door();
    15ca:	0e 94 81 0c 	call	0x1902	; 0x1902 <open_door>
				counter_trial = 0;
    15ce:	10 92 86 00 	sts	0x0086, r1
				while (g_step != 2)
    15d2:	80 91 92 00 	lds	r24, 0x0092
    15d6:	82 30       	cpi	r24, 0x02	; 2
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <main+0x1e2>
    15da:	74 cf       	rjmp	.-280    	; 0x14c4 <main+0xd4>
			 *  To open the door check password with eeprom
			 * if unmatched for 3 time go to step 5
			 * if matched open the door
			 * */
		case 4:
			recieve_Password();
    15dc:	0e 94 56 0b 	call	0x16ac	; 0x16ac <recieve_Password>
			result = check_with_EEPROM(new_pass, pass_1); // check password with the EEPROM
    15e0:	83 e9       	ldi	r24, 0x93	; 147
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	2d e8       	ldi	r18, 0x8D	; 141
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	b9 01       	movw	r22, r18
    15ea:	0e 94 3b 0c 	call	0x1876	; 0x1876 <check_with_EEPROM>
    15ee:	80 93 9b 00 	sts	0x009B, r24
			UART_sendByte(result); // result of check match or mismatch
    15f2:	80 91 9b 00 	lds	r24, 0x009B
    15f6:	0e 94 8b 11 	call	0x2316	; 0x2316 <UART_sendByte>
			if (result == 0) { //password unmatch
    15fa:	80 91 9b 00 	lds	r24, 0x009B
    15fe:	88 23       	and	r24, r24
    1600:	99 f4       	brne	.+38     	; 0x1628 <main+0x238>
				counter_trial++;
    1602:	80 91 86 00 	lds	r24, 0x0086
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	80 93 86 00 	sts	0x0086, r24
				/*the user run out the trials and go to step 5 */
				if (counter_trial == 3) {
    160c:	80 91 86 00 	lds	r24, 0x0086
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	29 f4       	brne	.+10     	; 0x161e <main+0x22e>
					counter_trial = 0;
    1614:	10 92 86 00 	sts	0x0086, r1
					g_step = 5;
    1618:	85 e0       	ldi	r24, 0x05	; 5
    161a:	80 93 92 00 	sts	0x0092, r24

				}
				UART_sendByte(g_step);
    161e:	80 91 92 00 	lds	r24, 0x0092
    1622:	0e 94 8b 11 	call	0x2316	; 0x2316 <UART_sendByte>
    1626:	4e cf       	rjmp	.-356    	; 0x14c4 <main+0xd4>
			} else if (result == 1) { //password match
    1628:	80 91 9b 00 	lds	r24, 0x009B
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	09 f0       	breq	.+2      	; 0x1632 <main+0x242>
    1630:	49 cf       	rjmp	.-366    	; 0x14c4 <main+0xd4>
				counter_trial = 0;
    1632:	10 92 86 00 	sts	0x0086, r1
				g_step = 0;
    1636:	10 92 92 00 	sts	0x0092, r1
				UART_sendByte(g_step);
    163a:	80 91 92 00 	lds	r24, 0x0092
    163e:	0e 94 8b 11 	call	0x2316	; 0x2316 <UART_sendByte>
    1642:	40 cf       	rjmp	.-384    	; 0x14c4 <main+0xd4>
			break;
			/* step 5 :
			 * The password  unmatched for 3 time.
			 */
		case 5:
			time = 60; /*the timer will count 60 seconds */
    1644:	8c e3       	ldi	r24, 0x3C	; 60
    1646:	80 93 99 00 	sts	0x0099, r24
			Timer_ConfigType timer = { Timer0, CTC, F_CPU_1024, No_Channel, 0,
					245 };
    164a:	ce 01       	movw	r24, r28
    164c:	0e 96       	adiw	r24, 0x0e	; 14
    164e:	99 a3       	std	Y+33, r25	; 0x21
    1650:	88 a3       	std	Y+32, r24	; 0x20
    1652:	e8 e6       	ldi	r30, 0x68	; 104
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	fb a3       	std	Y+35, r31	; 0x23
    1658:	ea a3       	std	Y+34, r30	; 0x22
    165a:	f6 e0       	ldi	r31, 0x06	; 6
    165c:	fc a3       	std	Y+36, r31	; 0x24
    165e:	ea a1       	ldd	r30, Y+34	; 0x22
    1660:	fb a1       	ldd	r31, Y+35	; 0x23
    1662:	00 80       	ld	r0, Z
    1664:	2a a1       	ldd	r18, Y+34	; 0x22
    1666:	3b a1       	ldd	r19, Y+35	; 0x23
    1668:	2f 5f       	subi	r18, 0xFF	; 255
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	3b a3       	std	Y+35, r19	; 0x23
    166e:	2a a3       	std	Y+34, r18	; 0x22
    1670:	e8 a1       	ldd	r30, Y+32	; 0x20
    1672:	f9 a1       	ldd	r31, Y+33	; 0x21
    1674:	00 82       	st	Z, r0
    1676:	28 a1       	ldd	r18, Y+32	; 0x20
    1678:	39 a1       	ldd	r19, Y+33	; 0x21
    167a:	2f 5f       	subi	r18, 0xFF	; 255
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	39 a3       	std	Y+33, r19	; 0x21
    1680:	28 a3       	std	Y+32, r18	; 0x20
    1682:	3c a1       	ldd	r19, Y+36	; 0x24
    1684:	31 50       	subi	r19, 0x01	; 1
    1686:	3c a3       	std	Y+36, r19	; 0x24
    1688:	8c a1       	ldd	r24, Y+36	; 0x24
    168a:	88 23       	and	r24, r24
    168c:	41 f7       	brne	.-48     	; 0x165e <main+0x26e>
			Timer_init(&timer);
    168e:	ce 01       	movw	r24, r28
    1690:	0e 96       	adiw	r24, 0x0e	; 14
    1692:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Timer_init>
			Timer0_setCallBack(Timer_function); /* Set the Call back function pointer in the timer0 driver*/
    1696:	8c e7       	ldi	r24, 0x7C	; 124
    1698:	9d e0       	ldi	r25, 0x0D	; 13
    169a:	0e 94 1b 10 	call	0x2036	; 0x2036 <Timer0_setCallBack>
			Buzzer_on();
    169e:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
			while (g_step != 2)
    16a2:	80 91 92 00 	lds	r24, 0x0092
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	e1 f7       	brne	.-8      	; 0x16a2 <main+0x2b2>
    16aa:	0c cf       	rjmp	.-488    	; 0x14c4 <main+0xd4>

000016ac <recieve_Password>:
 *******************************************************************************/
/* Description :
 * 1.Functional responsible for receiving password  for first time to be saved in the in EEPROM
 * 2. Receive password when changing password to be compared with password saved in EEPROM
 * 3 .Receive password to be compare  with password saved in the EEPROM*/
void recieve_Password() {
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	0f 92       	push	r0
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	/* Send MC2_READY byte to MC1 to ask it to send the password */
	UART_sendByte(MC2_READY);
    16ba:	80 e1       	ldi	r24, 0x10	; 16
    16bc:	0e 94 8b 11 	call	0x2316	; 0x2316 <UART_sendByte>
	for (i = 0; i < 5; i++) {
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	0c c0       	rjmp	.+24     	; 0x16dc <recieve_Password+0x30>
		new_pass[i] = UART_recieveByte();
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	08 2f       	mov	r16, r24
    16c8:	10 e0       	ldi	r17, 0x00	; 0
    16ca:	0e 94 a2 11 	call	0x2344	; 0x2344 <UART_recieveByte>
    16ce:	f8 01       	movw	r30, r16
    16d0:	ed 56       	subi	r30, 0x6D	; 109
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 83       	st	Z, r24
 * 3 .Receive password to be compare  with password saved in the EEPROM*/
void recieve_Password() {
	uint8 i;
	/* Send MC2_READY byte to MC1 to ask it to send the password */
	UART_sendByte(MC2_READY);
	for (i = 0; i < 5; i++) {
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	8f 5f       	subi	r24, 0xFF	; 255
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	85 30       	cpi	r24, 0x05	; 5
    16e0:	88 f3       	brcs	.-30     	; 0x16c4 <recieve_Password+0x18>
		new_pass[i] = UART_recieveByte();
	}
}
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret

000016ee <recieve_confirmPassword>:
/* Description :
 * 1.Functional responsible for receiving confirming password
 */
void recieve_confirmPassword() {
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	0f 92       	push	r0
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	/* Send MC2_READY byte to MC1 to ask it to send the password */
	UART_sendByte(MC2_READY);
    16fc:	80 e1       	ldi	r24, 0x10	; 16
    16fe:	0e 94 8b 11 	call	0x2316	; 0x2316 <UART_sendByte>
	for (i = 0; i < 5; i++) {
    1702:	19 82       	std	Y+1, r1	; 0x01
    1704:	0c c0       	rjmp	.+24     	; 0x171e <recieve_confirmPassword+0x30>
		pass_1[i] = UART_recieveByte();
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	08 2f       	mov	r16, r24
    170a:	10 e0       	ldi	r17, 0x00	; 0
    170c:	0e 94 a2 11 	call	0x2344	; 0x2344 <UART_recieveByte>
    1710:	f8 01       	movw	r30, r16
    1712:	e3 57       	subi	r30, 0x73	; 115
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 83       	st	Z, r24
 */
void recieve_confirmPassword() {
	uint8 i;
	/* Send MC2_READY byte to MC1 to ask it to send the password */
	UART_sendByte(MC2_READY);
	for (i = 0; i < 5; i++) {
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	85 30       	cpi	r24, 0x05	; 5
    1722:	88 f3       	brcs	.-30     	; 0x1706 <recieve_confirmPassword+0x18>
		pass_1[i] = UART_recieveByte();
	}

}
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	08 95       	ret

00001730 <save_Password>:
/* Description :
 * 1.Functional responsible for saving confirming password in external EEPROM
 */
void save_Password(uint8 *password) {
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	61 97       	sbiw	r28, 0x11	; 17
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	99 8b       	std	Y+17, r25	; 0x11
    1746:	88 8b       	std	Y+16, r24	; 0x10
	uint8 j;
	for (j = 0; j < 5; j++) {
    1748:	1f 86       	std	Y+15, r1	; 0x0f
    174a:	88 c0       	rjmp	.+272    	; 0x185c <save_Password+0x12c>
		EEPROM_writeByte(0x0311 + j, password[j]);
    174c:	8f 85       	ldd	r24, Y+15	; 0x0f
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	8f 5e       	subi	r24, 0xEF	; 239
    1754:	9c 4f       	sbci	r25, 0xFC	; 252
    1756:	ac 01       	movw	r20, r24
    1758:	8f 85       	ldd	r24, Y+15	; 0x0f
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	88 89       	ldd	r24, Y+16	; 0x10
    1760:	99 89       	ldd	r25, Y+17	; 0x11
    1762:	fc 01       	movw	r30, r24
    1764:	e2 0f       	add	r30, r18
    1766:	f3 1f       	adc	r31, r19
    1768:	20 81       	ld	r18, Z
    176a:	ca 01       	movw	r24, r20
    176c:	62 2f       	mov	r22, r18
    176e:	0e 94 19 06 	call	0xc32	; 0xc32 <EEPROM_writeByte>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e2       	ldi	r26, 0x20	; 32
    1778:	b1 e4       	ldi	r27, 0x41	; 65
    177a:	8b 87       	std	Y+11, r24	; 0x0b
    177c:	9c 87       	std	Y+12, r25	; 0x0c
    177e:	ad 87       	std	Y+13, r26	; 0x0d
    1780:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	6b 85       	ldd	r22, Y+11	; 0x0b
    1784:	7c 85       	ldd	r23, Y+12	; 0x0c
    1786:	8d 85       	ldd	r24, Y+13	; 0x0d
    1788:	9e 85       	ldd	r25, Y+14	; 0x0e
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a ef       	ldi	r20, 0xFA	; 250
    1790:	54 e4       	ldi	r21, 0x44	; 68
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8f 83       	std	Y+7, r24	; 0x07
    179c:	98 87       	std	Y+8, r25	; 0x08
    179e:	a9 87       	std	Y+9, r26	; 0x09
    17a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a2:	6f 81       	ldd	r22, Y+7	; 0x07
    17a4:	78 85       	ldd	r23, Y+8	; 0x08
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <save_Password+0x94>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	8d 83       	std	Y+5, r24	; 0x05
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <save_Password+0x112>
	else if (__tmp > 65535)
    17c4:	6f 81       	ldd	r22, Y+7	; 0x07
    17c6:	78 85       	ldd	r23, Y+8	; 0x08
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	4c f5       	brge	.+82     	; 0x182e <save_Password+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17de:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <save_Password+0xf4>
    1806:	88 ec       	ldi	r24, 0xC8	; 200
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9c 83       	std	Y+4, r25	; 0x04
    180c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <save_Password+0xe2>
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	69 f7       	brne	.-38     	; 0x1806 <save_Password+0xd6>
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <save_Password+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	9a 83       	std	Y+2, r25	; 0x02
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <save_Password+0x11e>
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
/* Description :
 * 1.Functional responsible for saving confirming password in external EEPROM
 */
void save_Password(uint8 *password) {
	uint8 j;
	for (j = 0; j < 5; j++) {
    1856:	8f 85       	ldd	r24, Y+15	; 0x0f
    1858:	8f 5f       	subi	r24, 0xFF	; 255
    185a:	8f 87       	std	Y+15, r24	; 0x0f
    185c:	8f 85       	ldd	r24, Y+15	; 0x0f
    185e:	85 30       	cpi	r24, 0x05	; 5
    1860:	08 f4       	brcc	.+2      	; 0x1864 <save_Password+0x134>
    1862:	74 cf       	rjmp	.-280    	; 0x174c <save_Password+0x1c>
		EEPROM_writeByte(0x0311 + j, password[j]);
		_delay_ms(10);
	}
}
    1864:	61 96       	adiw	r28, 0x11	; 17
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <check_with_EEPROM>:
/* Description :
 * 1.Functional responsible for checking input password with the saved password in the EEPROM
 */
uint8 check_with_EEPROM(uint8 *ptr1, uint8 *ptr2) {
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <check_with_EEPROM+0x6>
    187c:	00 d0       	rcall	.+0      	; 0x187e <check_with_EEPROM+0x8>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <check_with_EEPROM+0xa>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	9b 83       	std	Y+3, r25	; 0x03
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	7d 83       	std	Y+5, r23	; 0x05
    188a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 k;
	for (k = 0; k < 5; k++) { // password of 5 numbers
    188c:	19 82       	std	Y+1, r1	; 0x01
    188e:	2a c0       	rjmp	.+84     	; 0x18e4 <check_with_EEPROM+0x6e>
		/*reads the saved value of address 0x0311 and next 4 addresses in EEPROM and check sit with the input password */
		EEPROM_readByte(0x0311 + k, &ptr2[k]);
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	88 2f       	mov	r24, r24
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	8f 5e       	subi	r24, 0xEF	; 239
    1898:	9c 4f       	sbci	r25, 0xFC	; 252
    189a:	ac 01       	movw	r20, r24
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	28 0f       	add	r18, r24
    18a8:	39 1f       	adc	r19, r25
    18aa:	ca 01       	movw	r24, r20
    18ac:	b9 01       	movw	r22, r18
    18ae:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EEPROM_readByte>
		if (ptr1[k] != ptr2[k]) {
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	9b 81       	ldd	r25, Y+3	; 0x03
    18bc:	fc 01       	movw	r30, r24
    18be:	e2 0f       	add	r30, r18
    18c0:	f3 1f       	adc	r31, r19
    18c2:	40 81       	ld	r20, Z
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	fc 01       	movw	r30, r24
    18d0:	e2 0f       	add	r30, r18
    18d2:	f3 1f       	adc	r31, r19
    18d4:	80 81       	ld	r24, Z
    18d6:	48 17       	cp	r20, r24
    18d8:	11 f0       	breq	.+4      	; 0x18de <check_with_EEPROM+0x68>
			return 0;
    18da:	1e 82       	std	Y+6, r1	; 0x06
    18dc:	08 c0       	rjmp	.+16     	; 0x18ee <check_with_EEPROM+0x78>
/* Description :
 * 1.Functional responsible for checking input password with the saved password in the EEPROM
 */
uint8 check_with_EEPROM(uint8 *ptr1, uint8 *ptr2) {
	uint8 k;
	for (k = 0; k < 5; k++) { // password of 5 numbers
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	8f 5f       	subi	r24, 0xFF	; 255
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	85 30       	cpi	r24, 0x05	; 5
    18e8:	98 f2       	brcs	.-90     	; 0x1890 <check_with_EEPROM+0x1a>
		EEPROM_readByte(0x0311 + k, &ptr2[k]);
		if (ptr1[k] != ptr2[k]) {
			return 0;
		}
	}
	return 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	8e 83       	std	Y+6, r24	; 0x06
    18ee:	8e 81       	ldd	r24, Y+6	; 0x06
}
    18f0:	26 96       	adiw	r28, 0x06	; 6
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <open_door>:
/* Description :
 * 1.Functional responsible for opening the door if the entered password match the saved password
 */
void open_door() {
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	6a 97       	sbiw	r28, 0x1a	; 26
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
	time = 15; // the motor will rotate for 15 seconds
    1916:	8f e0       	ldi	r24, 0x0F	; 15
    1918:	80 93 99 00 	sts	0x0099, r24
	Timer_ConfigType timer = { Timer0, CTC, F_CPU_1024, No_Channel, 0, 245 }; //timer0 using compare mode
    191c:	ce 01       	movw	r24, r28
    191e:	40 96       	adiw	r24, 0x10	; 16
    1920:	9f 8b       	std	Y+23, r25	; 0x17
    1922:	8e 8b       	std	Y+22, r24	; 0x16
    1924:	ea e7       	ldi	r30, 0x7A	; 122
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	f9 8f       	std	Y+25, r31	; 0x19
    192a:	e8 8f       	std	Y+24, r30	; 0x18
    192c:	f6 e0       	ldi	r31, 0x06	; 6
    192e:	fa 8f       	std	Y+26, r31	; 0x1a
    1930:	e8 8d       	ldd	r30, Y+24	; 0x18
    1932:	f9 8d       	ldd	r31, Y+25	; 0x19
    1934:	00 80       	ld	r0, Z
    1936:	88 8d       	ldd	r24, Y+24	; 0x18
    1938:	99 8d       	ldd	r25, Y+25	; 0x19
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	99 8f       	std	Y+25, r25	; 0x19
    193e:	88 8f       	std	Y+24, r24	; 0x18
    1940:	ee 89       	ldd	r30, Y+22	; 0x16
    1942:	ff 89       	ldd	r31, Y+23	; 0x17
    1944:	00 82       	st	Z, r0
    1946:	8e 89       	ldd	r24, Y+22	; 0x16
    1948:	9f 89       	ldd	r25, Y+23	; 0x17
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	9f 8b       	std	Y+23, r25	; 0x17
    194e:	8e 8b       	std	Y+22, r24	; 0x16
    1950:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1952:	91 50       	subi	r25, 0x01	; 1
    1954:	9a 8f       	std	Y+26, r25	; 0x1a
    1956:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1958:	ee 23       	and	r30, r30
    195a:	51 f7       	brne	.-44     	; 0x1930 <open_door+0x2e>
	Timer_init(&timer); // initialize timer
    195c:	ce 01       	movw	r24, r28
    195e:	40 96       	adiw	r24, 0x10	; 16
    1960:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Timer_init>
	Timer0_setCallBack(Timer_function);
    1964:	8c e7       	ldi	r24, 0x7C	; 124
    1966:	9d e0       	ldi	r25, 0x0D	; 13
    1968:	0e 94 1b 10 	call	0x2036	; 0x2036 <Timer0_setCallBack>
	DC_state state = { clockwise };
    196c:	1f 86       	std	Y+15, r1	; 0x0f
	DcMotor_Rotate(state, 100); // door is opening
    196e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1970:	64 e6       	ldi	r22, 0x64	; 100
    1972:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e8       	ldi	r25, 0x80	; 128
    197a:	ab e3       	ldi	r26, 0x3B	; 59
    197c:	b5 e4       	ldi	r27, 0x45	; 69
    197e:	8b 87       	std	Y+11, r24	; 0x0b
    1980:	9c 87       	std	Y+12, r25	; 0x0c
    1982:	ad 87       	std	Y+13, r26	; 0x0d
    1984:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1986:	6b 85       	ldd	r22, Y+11	; 0x0b
    1988:	7c 85       	ldd	r23, Y+12	; 0x0c
    198a:	8d 85       	ldd	r24, Y+13	; 0x0d
    198c:	9e 85       	ldd	r25, Y+14	; 0x0e
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	4a ef       	ldi	r20, 0xFA	; 250
    1994:	54 e4       	ldi	r21, 0x44	; 68
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	8f 83       	std	Y+7, r24	; 0x07
    19a0:	98 87       	std	Y+8, r25	; 0x08
    19a2:	a9 87       	std	Y+9, r26	; 0x09
    19a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a6:	6f 81       	ldd	r22, Y+7	; 0x07
    19a8:	78 85       	ldd	r23, Y+8	; 0x08
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e8       	ldi	r20, 0x80	; 128
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ba:	88 23       	and	r24, r24
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <open_door+0xc6>
		__ticks = 1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	3f c0       	rjmp	.+126    	; 0x1a46 <open_door+0x144>
	else if (__tmp > 65535)
    19c8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ca:	78 85       	ldd	r23, Y+8	; 0x08
    19cc:	89 85       	ldd	r24, Y+9	; 0x09
    19ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	3f ef       	ldi	r19, 0xFF	; 255
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	57 e4       	ldi	r21, 0x47	; 71
    19d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	4c f5       	brge	.+82     	; 0x1a32 <open_door+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e2       	ldi	r20, 0x20	; 32
    19ee:	51 e4       	ldi	r21, 0x41	; 65
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <open_door+0x126>
    1a0a:	88 ec       	ldi	r24, 0xC8	; 200
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <open_door+0x114>
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	69 f7       	brne	.-38     	; 0x1a0a <open_door+0x108>
    1a30:	14 c0       	rjmp	.+40     	; 0x1a5a <open_door+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a32:	6f 81       	ldd	r22, Y+7	; 0x07
    1a34:	78 85       	ldd	r23, Y+8	; 0x08
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <open_door+0x150>
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	close_door();	  //close door function
    1a5a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <close_door>
}
    1a5e:	6a 96       	adiw	r28, 0x1a	; 26
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <close_door>:
/* Description :
 * 1.Functional responsible for closing the door after the door is opened
 */
void close_door() {
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	2c 97       	sbiw	r28, 0x0c	; 12
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
	time = 15; // the motor will rotate for 15 seconds
    1a84:	8f e0       	ldi	r24, 0x0F	; 15
    1a86:	80 93 99 00 	sts	0x0099, r24
	Timer_ConfigType timer = { Timer0, CTC, F_CPU_1024, No_Channel, 0, 245 };
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	02 96       	adiw	r24, 0x02	; 2
    1a8e:	99 87       	std	Y+9, r25	; 0x09
    1a90:	88 87       	std	Y+8, r24	; 0x08
    1a92:	e0 e8       	ldi	r30, 0x80	; 128
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	fb 87       	std	Y+11, r31	; 0x0b
    1a98:	ea 87       	std	Y+10, r30	; 0x0a
    1a9a:	f6 e0       	ldi	r31, 0x06	; 6
    1a9c:	fc 87       	std	Y+12, r31	; 0x0c
    1a9e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1aa0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1aa2:	00 80       	ld	r0, Z
    1aa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	9b 87       	std	Y+11, r25	; 0x0b
    1aac:	8a 87       	std	Y+10, r24	; 0x0a
    1aae:	e8 85       	ldd	r30, Y+8	; 0x08
    1ab0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ab2:	00 82       	st	Z, r0
    1ab4:	88 85       	ldd	r24, Y+8	; 0x08
    1ab6:	99 85       	ldd	r25, Y+9	; 0x09
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	99 87       	std	Y+9, r25	; 0x09
    1abc:	88 87       	std	Y+8, r24	; 0x08
    1abe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ac0:	91 50       	subi	r25, 0x01	; 1
    1ac2:	9c 87       	std	Y+12, r25	; 0x0c
    1ac4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ac6:	ee 23       	and	r30, r30
    1ac8:	51 f7       	brne	.-44     	; 0x1a9e <close_door+0x2e>
	Timer_init(&timer); // initialize timer
    1aca:	ce 01       	movw	r24, r28
    1acc:	02 96       	adiw	r24, 0x02	; 2
    1ace:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Timer_init>
	Timer0_setCallBack(Timer_function); // using timer0 in compare mode
    1ad2:	8c e7       	ldi	r24, 0x7C	; 124
    1ad4:	9d e0       	ldi	r25, 0x0D	; 13
    1ad6:	0e 94 1b 10 	call	0x2036	; 0x2036 <Timer0_setCallBack>
	DC_state state = { anticlockwise }; // door is closing
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	89 83       	std	Y+1, r24	; 0x01
	DcMotor_Rotate(state, 100);
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	64 e6       	ldi	r22, 0x64	; 100
    1ae2:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
}
    1ae6:	2c 96       	adiw	r28, 0x0c	; 12
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <Timer_function>:
/* Description :
 * 1. Call back Functional responsible for counting time required by the timer
 */
void Timer_function(void) {
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	0f 92       	push	r0
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
	count_flag++; // increase count flag each interrupt
    1b02:	80 91 9c 00 	lds	r24, 0x009C
    1b06:	8f 5f       	subi	r24, 0xFF	; 255
    1b08:	80 93 9c 00 	sts	0x009C, r24
	if (count_flag == 32) { // check if the count flag become 1 sec
    1b0c:	80 91 9c 00 	lds	r24, 0x009C
    1b10:	80 32       	cpi	r24, 0x20	; 32
    1b12:	e1 f4       	brne	.+56     	; 0x1b4c <Timer_function+0x54>
		count_flag = 0; // clear flag counter to start counting again
    1b14:	10 92 9c 00 	sts	0x009C, r1
		count++; //increase second counter
    1b18:	80 91 9a 00 	lds	r24, 0x009A
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	80 93 9a 00 	sts	0x009A, r24
		/*checks if seconds counter reached the required seconds
		 * clears the seconds counter*/
		if (count == time) {
    1b22:	90 91 9a 00 	lds	r25, 0x009A
    1b26:	80 91 99 00 	lds	r24, 0x0099
    1b2a:	98 17       	cp	r25, r24
    1b2c:	79 f4       	brne	.+30     	; 0x1b4c <Timer_function+0x54>
			count = 0;
    1b2e:	10 92 9a 00 	sts	0x009A, r1
			DC_state state = { stop }; // door is closing
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	89 83       	std	Y+1, r24	; 0x01
			DcMotor_Rotate(state, 0);
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
			Timer_DeInit();
    1b3e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Timer_DeInit>
			Buzzer_off();
    1b42:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
			g_step = 2;
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	80 93 92 00 	sts	0x0092, r24
		}
	}
}
    1b4c:	0f 90       	pop	r0
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <__vector_9>:

/*******************************************************************************/
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect) {
    1b54:	1f 92       	push	r1
    1b56:	0f 92       	push	r0
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	0f 92       	push	r0
    1b5c:	11 24       	eor	r1, r1
    1b5e:	2f 93       	push	r18
    1b60:	3f 93       	push	r19
    1b62:	4f 93       	push	r20
    1b64:	5f 93       	push	r21
    1b66:	6f 93       	push	r22
    1b68:	7f 93       	push	r23
    1b6a:	8f 93       	push	r24
    1b6c:	9f 93       	push	r25
    1b6e:	af 93       	push	r26
    1b70:	bf 93       	push	r27
    1b72:	ef 93       	push	r30
    1b74:	ff 93       	push	r31
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr0 != NULL_PTR) {
    1b7e:	80 91 87 00 	lds	r24, 0x0087
    1b82:	90 91 88 00 	lds	r25, 0x0088
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	29 f0       	breq	.+10     	; 0x1b94 <__vector_9+0x40>
		/* Call the Call Back function in the application after interrupt by normal mode in timer0 is handled */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b8a:	e0 91 87 00 	lds	r30, 0x0087
    1b8e:	f0 91 88 00 	lds	r31, 0x0088
    1b92:	09 95       	icall
	}
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	ff 91       	pop	r31
    1b9a:	ef 91       	pop	r30
    1b9c:	bf 91       	pop	r27
    1b9e:	af 91       	pop	r26
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	7f 91       	pop	r23
    1ba6:	6f 91       	pop	r22
    1ba8:	5f 91       	pop	r21
    1baa:	4f 91       	pop	r20
    1bac:	3f 91       	pop	r19
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	0f 90       	pop	r0
    1bb6:	1f 90       	pop	r1
    1bb8:	18 95       	reti

00001bba <__vector_19>:
ISR(TIMER0_COMP_vect) {
    1bba:	1f 92       	push	r1
    1bbc:	0f 92       	push	r0
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	0f 92       	push	r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	2f 93       	push	r18
    1bc6:	3f 93       	push	r19
    1bc8:	4f 93       	push	r20
    1bca:	5f 93       	push	r21
    1bcc:	6f 93       	push	r22
    1bce:	7f 93       	push	r23
    1bd0:	8f 93       	push	r24
    1bd2:	9f 93       	push	r25
    1bd4:	af 93       	push	r26
    1bd6:	bf 93       	push	r27
    1bd8:	ef 93       	push	r30
    1bda:	ff 93       	push	r31
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr0 != NULL_PTR) {
    1be4:	80 91 87 00 	lds	r24, 0x0087
    1be8:	90 91 88 00 	lds	r25, 0x0088
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	29 f0       	breq	.+10     	; 0x1bfa <__vector_19+0x40>
		/* Call the Call Back function in the application after interrupt by compare mode in timer0 is handled */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1bf0:	e0 91 87 00 	lds	r30, 0x0087
    1bf4:	f0 91 88 00 	lds	r31, 0x0088
    1bf8:	09 95       	icall
	}
}
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	ff 91       	pop	r31
    1c00:	ef 91       	pop	r30
    1c02:	bf 91       	pop	r27
    1c04:	af 91       	pop	r26
    1c06:	9f 91       	pop	r25
    1c08:	8f 91       	pop	r24
    1c0a:	7f 91       	pop	r23
    1c0c:	6f 91       	pop	r22
    1c0e:	5f 91       	pop	r21
    1c10:	4f 91       	pop	r20
    1c12:	3f 91       	pop	r19
    1c14:	2f 91       	pop	r18
    1c16:	0f 90       	pop	r0
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	0f 90       	pop	r0
    1c1c:	1f 90       	pop	r1
    1c1e:	18 95       	reti

00001c20 <__vector_8>:
ISR(TIMER1_OVF_vect) {
    1c20:	1f 92       	push	r1
    1c22:	0f 92       	push	r0
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	0f 92       	push	r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	2f 93       	push	r18
    1c2c:	3f 93       	push	r19
    1c2e:	4f 93       	push	r20
    1c30:	5f 93       	push	r21
    1c32:	6f 93       	push	r22
    1c34:	7f 93       	push	r23
    1c36:	8f 93       	push	r24
    1c38:	9f 93       	push	r25
    1c3a:	af 93       	push	r26
    1c3c:	bf 93       	push	r27
    1c3e:	ef 93       	push	r30
    1c40:	ff 93       	push	r31
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR) {
    1c4a:	80 91 89 00 	lds	r24, 0x0089
    1c4e:	90 91 8a 00 	lds	r25, 0x008A
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	29 f0       	breq	.+10     	; 0x1c60 <__vector_8+0x40>
		/* Call the Call Back function in the application after interrupt by normal mode in timer1 is handled */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1c56:	e0 91 89 00 	lds	r30, 0x0089
    1c5a:	f0 91 8a 00 	lds	r31, 0x008A
    1c5e:	09 95       	icall
	}
}
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	ff 91       	pop	r31
    1c66:	ef 91       	pop	r30
    1c68:	bf 91       	pop	r27
    1c6a:	af 91       	pop	r26
    1c6c:	9f 91       	pop	r25
    1c6e:	8f 91       	pop	r24
    1c70:	7f 91       	pop	r23
    1c72:	6f 91       	pop	r22
    1c74:	5f 91       	pop	r21
    1c76:	4f 91       	pop	r20
    1c78:	3f 91       	pop	r19
    1c7a:	2f 91       	pop	r18
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	0f 90       	pop	r0
    1c82:	1f 90       	pop	r1
    1c84:	18 95       	reti

00001c86 <__vector_6>:
ISR(TIMER1_COMPA_vect) {
    1c86:	1f 92       	push	r1
    1c88:	0f 92       	push	r0
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	0f 92       	push	r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	2f 93       	push	r18
    1c92:	3f 93       	push	r19
    1c94:	4f 93       	push	r20
    1c96:	5f 93       	push	r21
    1c98:	6f 93       	push	r22
    1c9a:	7f 93       	push	r23
    1c9c:	8f 93       	push	r24
    1c9e:	9f 93       	push	r25
    1ca0:	af 93       	push	r26
    1ca2:	bf 93       	push	r27
    1ca4:	ef 93       	push	r30
    1ca6:	ff 93       	push	r31
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR) {
    1cb0:	80 91 89 00 	lds	r24, 0x0089
    1cb4:	90 91 8a 00 	lds	r25, 0x008A
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	29 f0       	breq	.+10     	; 0x1cc6 <__vector_6+0x40>
		/* Call the Call Back function in the application after interrupt by compare mode in timer1 using channelA  is handled */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1cbc:	e0 91 89 00 	lds	r30, 0x0089
    1cc0:	f0 91 8a 00 	lds	r31, 0x008A
    1cc4:	09 95       	icall
	}
}
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	ff 91       	pop	r31
    1ccc:	ef 91       	pop	r30
    1cce:	bf 91       	pop	r27
    1cd0:	af 91       	pop	r26
    1cd2:	9f 91       	pop	r25
    1cd4:	8f 91       	pop	r24
    1cd6:	7f 91       	pop	r23
    1cd8:	6f 91       	pop	r22
    1cda:	5f 91       	pop	r21
    1cdc:	4f 91       	pop	r20
    1cde:	3f 91       	pop	r19
    1ce0:	2f 91       	pop	r18
    1ce2:	0f 90       	pop	r0
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	0f 90       	pop	r0
    1ce8:	1f 90       	pop	r1
    1cea:	18 95       	reti

00001cec <__vector_4>:
ISR(TIMER2_OVF_vect) {
    1cec:	1f 92       	push	r1
    1cee:	0f 92       	push	r0
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	0f 92       	push	r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	2f 93       	push	r18
    1cf8:	3f 93       	push	r19
    1cfa:	4f 93       	push	r20
    1cfc:	5f 93       	push	r21
    1cfe:	6f 93       	push	r22
    1d00:	7f 93       	push	r23
    1d02:	8f 93       	push	r24
    1d04:	9f 93       	push	r25
    1d06:	af 93       	push	r26
    1d08:	bf 93       	push	r27
    1d0a:	ef 93       	push	r30
    1d0c:	ff 93       	push	r31
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr2 != NULL_PTR) {
    1d16:	80 91 8b 00 	lds	r24, 0x008B
    1d1a:	90 91 8c 00 	lds	r25, 0x008C
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	29 f0       	breq	.+10     	; 0x1d2c <__vector_4+0x40>
		/* Call the Call Back function in the application after interrupt by normal mode in timer2 is handled */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d22:	e0 91 8b 00 	lds	r30, 0x008B
    1d26:	f0 91 8c 00 	lds	r31, 0x008C
    1d2a:	09 95       	icall
	}
}
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	ff 91       	pop	r31
    1d32:	ef 91       	pop	r30
    1d34:	bf 91       	pop	r27
    1d36:	af 91       	pop	r26
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	7f 91       	pop	r23
    1d3e:	6f 91       	pop	r22
    1d40:	5f 91       	pop	r21
    1d42:	4f 91       	pop	r20
    1d44:	3f 91       	pop	r19
    1d46:	2f 91       	pop	r18
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	0f 90       	pop	r0
    1d4e:	1f 90       	pop	r1
    1d50:	18 95       	reti

00001d52 <__vector_3>:
ISR(TIMER2_COMP_vect) {
    1d52:	1f 92       	push	r1
    1d54:	0f 92       	push	r0
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	0f 92       	push	r0
    1d5a:	11 24       	eor	r1, r1
    1d5c:	2f 93       	push	r18
    1d5e:	3f 93       	push	r19
    1d60:	4f 93       	push	r20
    1d62:	5f 93       	push	r21
    1d64:	6f 93       	push	r22
    1d66:	7f 93       	push	r23
    1d68:	8f 93       	push	r24
    1d6a:	9f 93       	push	r25
    1d6c:	af 93       	push	r26
    1d6e:	bf 93       	push	r27
    1d70:	ef 93       	push	r30
    1d72:	ff 93       	push	r31
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr2 != NULL_PTR) {
    1d7c:	80 91 8b 00 	lds	r24, 0x008B
    1d80:	90 91 8c 00 	lds	r25, 0x008C
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	29 f0       	breq	.+10     	; 0x1d92 <__vector_3+0x40>
		/* Call the Call Back function in the application after interrupt by compare mode intimer2 is handled */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d88:	e0 91 8b 00 	lds	r30, 0x008B
    1d8c:	f0 91 8c 00 	lds	r31, 0x008C
    1d90:	09 95       	icall
	}
}
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	ff 91       	pop	r31
    1d98:	ef 91       	pop	r30
    1d9a:	bf 91       	pop	r27
    1d9c:	af 91       	pop	r26
    1d9e:	9f 91       	pop	r25
    1da0:	8f 91       	pop	r24
    1da2:	7f 91       	pop	r23
    1da4:	6f 91       	pop	r22
    1da6:	5f 91       	pop	r21
    1da8:	4f 91       	pop	r20
    1daa:	3f 91       	pop	r19
    1dac:	2f 91       	pop	r18
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	0f 90       	pop	r0
    1db4:	1f 90       	pop	r1
    1db6:	18 95       	reti

00001db8 <Timer_init>:
 * 	3. Enable the non PWM mode.
 * 	4. Initialize Timer Registers
 * 	5. Set Timer initial value
 * 	6. set Timer Compare value
 */
void Timer_init(const Timer_ConfigType *Config_Ptr) {
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <Timer_init+0x6>
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <Timer_init+0x8>
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	9a 83       	std	Y+2, r25	; 0x02
    1dc6:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->type) {
    1dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dca:	fa 81       	ldd	r31, Y+2	; 0x02
    1dcc:	80 81       	ld	r24, Z
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3c 83       	std	Y+4, r19	; 0x04
    1dd4:	2b 83       	std	Y+3, r18	; 0x03
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <Timer_init+0x2a>
    1de0:	5b c0       	rjmp	.+182    	; 0x1e98 <Timer_init+0xe0>
    1de2:	2b 81       	ldd	r18, Y+3	; 0x03
    1de4:	3c 81       	ldd	r19, Y+4	; 0x04
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <Timer_init+0x36>
    1dec:	cf c0       	rjmp	.+414    	; 0x1f8c <Timer_init+0x1d4>
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <Timer_init+0x40>
    1df6:	18 c1       	rjmp	.+560    	; 0x2028 <Timer_init+0x270>
	case Timer0:
		if ((Config_Ptr->mode) == Normal) {
    1df8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfc:	81 81       	ldd	r24, Z+1	; 0x01
    1dfe:	88 23       	and	r24, r24
    1e00:	09 f5       	brne	.+66     	; 0x1e44 <Timer_init+0x8c>
			TCNT0 = (Config_Ptr->Value);
    1e02:	a2 e5       	ldi	r26, 0x52	; 82
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e9 81       	ldd	r30, Y+1	; 0x01
    1e08:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0a:	84 81       	ldd	r24, Z+4	; 0x04
    1e0c:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE0);	// Enable Timer0 Overflow Interrupt
    1e0e:	a9 e5       	ldi	r26, 0x59	; 89
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e9 e5       	ldi	r30, 0x59	; 89
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	81 60       	ori	r24, 0x01	; 1
    1e1a:	8c 93       	st	X, r24
			SET_BIT(TCCR0, FOC0); // Non PWM mode FOC0=1
    1e1c:	a3 e5       	ldi	r26, 0x53	; 83
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e3 e5       	ldi	r30, 0x53	; 83
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	80 68       	ori	r24, 0x80	; 128
    1e28:	8c 93       	st	X, r24
			/*
			 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
			 * of TCCR0 Register
			 */
			TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    1e2a:	a3 e5       	ldi	r26, 0x53	; 83
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e3 e5       	ldi	r30, 0x53	; 83
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	98 2f       	mov	r25, r24
    1e36:	98 7f       	andi	r25, 0xF8	; 248
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	89 2b       	or	r24, r25
    1e40:	8c 93       	st	X, r24
    1e42:	f2 c0       	rjmp	.+484    	; 0x2028 <Timer_init+0x270>
		} else if ((Config_Ptr->mode) == CTC) {
    1e44:	e9 81       	ldd	r30, Y+1	; 0x01
    1e46:	fa 81       	ldd	r31, Y+2	; 0x02
    1e48:	81 81       	ldd	r24, Z+1	; 0x01
    1e4a:	82 30       	cpi	r24, 0x02	; 2
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <Timer_init+0x98>
    1e4e:	ec c0       	rjmp	.+472    	; 0x2028 <Timer_init+0x270>
			TCNT0 = (Config_Ptr->Value);
    1e50:	a2 e5       	ldi	r26, 0x52	; 82
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	84 81       	ldd	r24, Z+4	; 0x04
    1e5a:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE0); // Enable Timer0 Compare Interrupt
    1e5c:	a9 e5       	ldi	r26, 0x59	; 89
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e9 e5       	ldi	r30, 0x59	; 89
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	82 60       	ori	r24, 0x02	; 2
    1e68:	8c 93       	st	X, r24
			/* 1.Non PWM mode FOC0=1
			 * 2. compare mode WGM01=1
			 * */
			TCCR0 = (1 << FOC0) | (1 << WGM01);
    1e6a:	e3 e5       	ldi	r30, 0x53	; 83
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	88 e8       	ldi	r24, 0x88	; 136
    1e70:	80 83       	st	Z, r24
			/*
			 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
			 * of TCCR0 Register
			 */
			TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    1e72:	a3 e5       	ldi	r26, 0x53	; 83
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e3 e5       	ldi	r30, 0x53	; 83
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	98 7f       	andi	r25, 0xF8	; 248
    1e80:	e9 81       	ldd	r30, Y+1	; 0x01
    1e82:	fa 81       	ldd	r31, Y+2	; 0x02
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	89 2b       	or	r24, r25
    1e88:	8c 93       	st	X, r24
			OCR0 = (Config_Ptr->compareValue); //set Timer Compare value
    1e8a:	ac e5       	ldi	r26, 0x5C	; 92
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e90:	fa 81       	ldd	r31, Y+2	; 0x02
    1e92:	85 81       	ldd	r24, Z+5	; 0x05
    1e94:	8c 93       	st	X, r24
    1e96:	c8 c0       	rjmp	.+400    	; 0x2028 <Timer_init+0x270>
		}
		break;
	case Timer1:
		if ((Config_Ptr->mode) == Normal) {
    1e98:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9c:	81 81       	ldd	r24, Z+1	; 0x01
    1e9e:	88 23       	and	r24, r24
    1ea0:	11 f5       	brne	.+68     	; 0x1ee6 <Timer_init+0x12e>
			TCNT1=  (Config_Ptr->Value);
    1ea2:	ac e4       	ldi	r26, 0x4C	; 76
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	84 81       	ldd	r24, Z+4	; 0x04
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	11 96       	adiw	r26, 0x01	; 1
    1eb2:	9c 93       	st	X, r25
    1eb4:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, TICIE1);	// Enable Timer1 Overflow Interrupt
    1eb6:	a9 e5       	ldi	r26, 0x59	; 89
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e9 e5       	ldi	r30, 0x59	; 89
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 62       	ori	r24, 0x20	; 32
    1ec2:	8c 93       	st	X, r24
			TCCR1A = (1 << FOC1A) | (1 << FOC1B);// Non PWM mode FOC1A=1, FOC1B=1
    1ec4:	ef e4       	ldi	r30, 0x4F	; 79
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8c e0       	ldi	r24, 0x0C	; 12
    1eca:	80 83       	st	Z, r24
			/*
			 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
			 * of TCCR1B Register
			 */
			TCCR1B = (TCCR1B & 0xFC) | (Config_Ptr->clock);
    1ecc:	ae e4       	ldi	r26, 0x4E	; 78
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	ee e4       	ldi	r30, 0x4E	; 78
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	9c 7f       	andi	r25, 0xFC	; 252
    1eda:	e9 81       	ldd	r30, Y+1	; 0x01
    1edc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	89 2b       	or	r24, r25
    1ee2:	8c 93       	st	X, r24
    1ee4:	a1 c0       	rjmp	.+322    	; 0x2028 <Timer_init+0x270>
		} else if ((Config_Ptr->mode) == CTC) {
    1ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eea:	81 81       	ldd	r24, Z+1	; 0x01
    1eec:	82 30       	cpi	r24, 0x02	; 2
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <Timer_init+0x13a>
    1ef0:	9b c0       	rjmp	.+310    	; 0x2028 <Timer_init+0x270>
			TCNT1 = (Config_Ptr->Value);
    1ef2:	ac e4       	ldi	r26, 0x4C	; 76
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    1efa:	84 81       	ldd	r24, Z+4	; 0x04
    1efc:	88 2f       	mov	r24, r24
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	11 96       	adiw	r26, 0x01	; 1
    1f02:	9c 93       	st	X, r25
    1f04:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); // Enable Timer1 Compare Interrupt
    1f06:	a9 e5       	ldi	r26, 0x59	; 89
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e5       	ldi	r30, 0x59	; 89
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	80 61       	ori	r24, 0x10	; 16
    1f12:	8c 93       	st	X, r24
			TCCR1A = (1 << FOC1A) | (1 << FOC1B); // Non PWM mode FOC1A=1, FOC1B=1
    1f14:	ef e4       	ldi	r30, 0x4F	; 79
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	8c e0       	ldi	r24, 0x0C	; 12
    1f1a:	80 83       	st	Z, r24
			/*
			 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
			 * of TCCR1B Register
			 */
			TCCR1B = (TCCR1B & 0xFC) | (Config_Ptr->clock);
    1f1c:	ae e4       	ldi	r26, 0x4E	; 78
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	ee e4       	ldi	r30, 0x4E	; 78
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	98 2f       	mov	r25, r24
    1f28:	9c 7f       	andi	r25, 0xFC	; 252
    1f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	89 2b       	or	r24, r25
    1f32:	8c 93       	st	X, r24
			if (Config_Ptr->channel == ChannelA_ID) {
    1f34:	e9 81       	ldd	r30, Y+1	; 0x01
    1f36:	fa 81       	ldd	r31, Y+2	; 0x02
    1f38:	83 81       	ldd	r24, Z+3	; 0x03
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	91 f4       	brne	.+36     	; 0x1f62 <Timer_init+0x1aa>
				OCR1A = (Config_Ptr->compareValue); //set Timer Compare value
    1f3e:	aa e4       	ldi	r26, 0x4A	; 74
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e9 81       	ldd	r30, Y+1	; 0x01
    1f44:	fa 81       	ldd	r31, Y+2	; 0x02
    1f46:	85 81       	ldd	r24, Z+5	; 0x05
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	11 96       	adiw	r26, 0x01	; 1
    1f4e:	9c 93       	st	X, r25
    1f50:	8e 93       	st	-X, r24
				SET_BIT(TCCR1B, WGM12);
    1f52:	ae e4       	ldi	r26, 0x4E	; 78
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	ee e4       	ldi	r30, 0x4E	; 78
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	88 60       	ori	r24, 0x08	; 8
    1f5e:	8c 93       	st	X, r24
    1f60:	63 c0       	rjmp	.+198    	; 0x2028 <Timer_init+0x270>
			} else if (Config_Ptr->channel == ChannelB_ID) {
    1f62:	e9 81       	ldd	r30, Y+1	; 0x01
    1f64:	fa 81       	ldd	r31, Y+2	; 0x02
    1f66:	83 81       	ldd	r24, Z+3	; 0x03
    1f68:	82 30       	cpi	r24, 0x02	; 2
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <Timer_init+0x1b6>
    1f6c:	5d c0       	rjmp	.+186    	; 0x2028 <Timer_init+0x270>
				ICR1 = (Config_Ptr->compareValue); //set Timer Compare value
    1f6e:	a6 e4       	ldi	r26, 0x46	; 70
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e9 81       	ldd	r30, Y+1	; 0x01
    1f74:	fa 81       	ldd	r31, Y+2	; 0x02
    1f76:	85 81       	ldd	r24, Z+5	; 0x05
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	11 96       	adiw	r26, 0x01	; 1
    1f7e:	9c 93       	st	X, r25
    1f80:	8e 93       	st	-X, r24
				TCCR1B = (1 << WGM12) | (1 << WGM13);
    1f82:	ee e4       	ldi	r30, 0x4E	; 78
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	88 e1       	ldi	r24, 0x18	; 24
    1f88:	80 83       	st	Z, r24
    1f8a:	4e c0       	rjmp	.+156    	; 0x2028 <Timer_init+0x270>
			}
		}
		break;
	case Timer2:
		if ((Config_Ptr->mode) == Normal) {
    1f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f90:	81 81       	ldd	r24, Z+1	; 0x01
    1f92:	88 23       	and	r24, r24
    1f94:	09 f5       	brne	.+66     	; 0x1fd8 <Timer_init+0x220>
			TCNT2 = (Config_Ptr->Value);
    1f96:	a4 e4       	ldi	r26, 0x44	; 68
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9e:	84 81       	ldd	r24, Z+4	; 0x04
    1fa0:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE2);	// Enable Timer0 Overflow Interrupt
    1fa2:	a9 e5       	ldi	r26, 0x59	; 89
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e9 e5       	ldi	r30, 0x59	; 89
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 64       	ori	r24, 0x40	; 64
    1fae:	8c 93       	st	X, r24
			SET_BIT(TCCR2, FOC2); // Non PWM mode FOC0=1
    1fb0:	a5 e4       	ldi	r26, 0x45	; 69
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e5 e4       	ldi	r30, 0x45	; 69
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	80 68       	ori	r24, 0x80	; 128
    1fbc:	8c 93       	st	X, r24
			/*
			 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
			 * of TCCR0 Register
			 */
			TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->clock);
    1fbe:	a5 e4       	ldi	r26, 0x45	; 69
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e5 e4       	ldi	r30, 0x45	; 69
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	98 2f       	mov	r25, r24
    1fca:	98 7f       	andi	r25, 0xF8	; 248
    1fcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fce:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	89 2b       	or	r24, r25
    1fd4:	8c 93       	st	X, r24
    1fd6:	28 c0       	rjmp	.+80     	; 0x2028 <Timer_init+0x270>
		} else if ((Config_Ptr->mode) == CTC) {
    1fd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fda:	fa 81       	ldd	r31, Y+2	; 0x02
    1fdc:	81 81       	ldd	r24, Z+1	; 0x01
    1fde:	82 30       	cpi	r24, 0x02	; 2
    1fe0:	19 f5       	brne	.+70     	; 0x2028 <Timer_init+0x270>
			TCNT2 = (Config_Ptr->Value);
    1fe2:	a4 e4       	ldi	r26, 0x44	; 68
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fea:	84 81       	ldd	r24, Z+4	; 0x04
    1fec:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); // Enable Timer0 Compare Interrupt
    1fee:	a9 e5       	ldi	r26, 0x59	; 89
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e9 e5       	ldi	r30, 0x59	; 89
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	80 68       	ori	r24, 0x80	; 128
    1ffa:	8c 93       	st	X, r24
			/* 1.Non PWM mode FOC0=1
			 * 2. compare mode WGM01=1
			 * */
			TCCR2 = (1 << FOC2) | (1 << WGM21);
    1ffc:	e5 e4       	ldi	r30, 0x45	; 69
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	88 e8       	ldi	r24, 0x88	; 136
    2002:	80 83       	st	Z, r24
			/*
			 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
			 * of TCCR0 Register
			 */
			TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->clock);
    2004:	a5 e4       	ldi	r26, 0x45	; 69
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e5 e4       	ldi	r30, 0x45	; 69
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	98 2f       	mov	r25, r24
    2010:	98 7f       	andi	r25, 0xF8	; 248
    2012:	e9 81       	ldd	r30, Y+1	; 0x01
    2014:	fa 81       	ldd	r31, Y+2	; 0x02
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	89 2b       	or	r24, r25
    201a:	8c 93       	st	X, r24
			OCR2 = (Config_Ptr->compareValue); //set Timer Compare value
    201c:	a3 e4       	ldi	r26, 0x43	; 67
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e9 81       	ldd	r30, Y+1	; 0x01
    2022:	fa 81       	ldd	r31, Y+2	; 0x02
    2024:	85 81       	ldd	r24, Z+5	; 0x05
    2026:	8c 93       	st	X, r24
		}
		break;
	}
}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address using timer0.
 */
void Timer0_setCallBack(void (*a_ptr0)(void)) {
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <Timer0_setCallBack+0x6>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr0;
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	90 93 88 00 	sts	0x0088, r25
    204c:	80 93 87 00 	sts	0x0087, r24
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <Timer1_setCallBack>:
/*
 * Description: Function to set the Call Back function address using timer1.
 */
void Timer1_setCallBack(void (*a_ptr1)(void)) {
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <Timer1_setCallBack+0x6>
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr1;
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	9a 81       	ldd	r25, Y+2	; 0x02
    206c:	90 93 8a 00 	sts	0x008A, r25
    2070:	80 93 89 00 	sts	0x0089, r24
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <Timer2_setCallBack>:
/*
 * Description: Function to set the Call Back function address using timer2.
 */
void Timer2_setCallBack(void (*a_ptr2)(void)) {
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <Timer2_setCallBack+0x6>
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = a_ptr2;
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	90 93 8c 00 	sts	0x008C, r25
    2094:	80 93 8b 00 	sts	0x008B, r24
}
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <Timer_DeInit>:
/*
 * Description: Function to disable the Timer
 */
void Timer_DeInit(void) {
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    20aa:	e2 e5       	ldi	r30, 0x52	; 82
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	10 82       	st	Z, r1
	TIMSK = 0;
    20b0:	e9 e5       	ldi	r30, 0x59	; 89
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	10 82       	st	Z, r1
	TCCR0 = 0;
    20b6:	e3 e5       	ldi	r30, 0x53	; 83
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	10 82       	st	Z, r1
	TCCR1A=0;
    20bc:	ef e4       	ldi	r30, 0x4F	; 79
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	10 82       	st	Z, r1
	TCNT1=0;
    20c2:	ec e4       	ldi	r30, 0x4C	; 76
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	11 82       	std	Z+1, r1	; 0x01
    20c8:	10 82       	st	Z, r1
}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	00 d0       	rcall	.+0      	; 0x20da <TWI_init+0xa>
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
       TWBR =  ((((8000000/ (((Config_Ptr->rate)) ))) - 16)/2);
    20e2:	00 e2       	ldi	r16, 0x20	; 32
    20e4:	10 e0       	ldi	r17, 0x00	; 0
    20e6:	e9 81       	ldd	r30, Y+1	; 0x01
    20e8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ea:	20 81       	ld	r18, Z
    20ec:	31 81       	ldd	r19, Z+1	; 0x01
    20ee:	42 81       	ldd	r20, Z+2	; 0x02
    20f0:	53 81       	ldd	r21, Z+3	; 0x03
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	92 e1       	ldi	r25, 0x12	; 18
    20f6:	aa e7       	ldi	r26, 0x7A	; 122
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodsi4>
    2102:	da 01       	movw	r26, r20
    2104:	c9 01       	movw	r24, r18
    2106:	40 97       	sbiw	r24, 0x10	; 16
    2108:	a1 09       	sbc	r26, r1
    210a:	b1 09       	sbc	r27, r1
    210c:	b6 95       	lsr	r27
    210e:	a7 95       	ror	r26
    2110:	97 95       	ror	r25
    2112:	87 95       	ror	r24
    2114:	f8 01       	movw	r30, r16
    2116:	80 83       	st	Z, r24
       TWSR=0x00;
    2118:	e1 e2       	ldi	r30, 0x21	; 33
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	10 82       	st	Z, r1
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	 TWAR=(Config_Ptr-> address);
    211e:	a2 e2       	ldi	r26, 0x22	; 34
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e9 81       	ldd	r30, Y+1	; 0x01
    2124:	fa 81       	ldd	r31, Y+2	; 0x02
    2126:	84 81       	ldd	r24, Z+4	; 0x04
    2128:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    212a:	e6 e5       	ldi	r30, 0x56	; 86
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	84 e0       	ldi	r24, 0x04	; 4
    2130:	80 83       	st	Z, r24
}
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	08 95       	ret

00002140 <TWI_start>:

void TWI_start(void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2148:	e6 e5       	ldi	r30, 0x56	; 86
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	84 ea       	ldi	r24, 0xA4	; 164
    214e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2150:	e6 e5       	ldi	r30, 0x56	; 86
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	88 23       	and	r24, r24
    2158:	dc f7       	brge	.-10     	; 0x2150 <TWI_start+0x10>
}
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <TWI_stop>:

void TWI_stop(void)
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2168:	e6 e5       	ldi	r30, 0x56	; 86
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	84 e9       	ldi	r24, 0x94	; 148
    216e:	80 83       	st	Z, r24
}
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	0f 92       	push	r0
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2182:	e3 e2       	ldi	r30, 0x23	; 35
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    218a:	e6 e5       	ldi	r30, 0x56	; 86
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	84 e8       	ldi	r24, 0x84	; 132
    2190:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2192:	e6 e5       	ldi	r30, 0x56	; 86
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	88 23       	and	r24, r24
    219a:	dc f7       	brge	.-10     	; 0x2192 <TWI_writeByte+0x1c>
}
    219c:	0f 90       	pop	r0
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    21ac:	e6 e5       	ldi	r30, 0x56	; 86
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	84 ec       	ldi	r24, 0xC4	; 196
    21b2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21b4:	e6 e5       	ldi	r30, 0x56	; 86
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	88 23       	and	r24, r24
    21bc:	dc f7       	brge	.-10     	; 0x21b4 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    21be:	e3 e2       	ldi	r30, 0x23	; 35
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
}
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    21d2:	e6 e5       	ldi	r30, 0x56	; 86
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	84 e8       	ldi	r24, 0x84	; 132
    21d8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21da:	e6 e5       	ldi	r30, 0x56	; 86
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	88 23       	and	r24, r24
    21e2:	dc f7       	brge	.-10     	; 0x21da <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    21e4:	e3 e2       	ldi	r30, 0x23	; 35
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
}
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	0f 92       	push	r0
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    21fa:	e1 e2       	ldi	r30, 0x21	; 33
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	88 7f       	andi	r24, 0xF8	; 248
    2202:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2204:	89 81       	ldd	r24, Y+1	; 0x01
}
    2206:	0f 90       	pop	r0
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	00 d0       	rcall	.+0      	; 0x2214 <UART_init+0x6>
    2214:	00 d0       	rcall	.+0      	; 0x2216 <UART_init+0x8>
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	9c 83       	std	Y+4, r25	; 0x04
    221c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    221e:	1a 82       	std	Y+2, r1	; 0x02
    2220:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    2222:	eb e2       	ldi	r30, 0x2B	; 43
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    222a:	ea e2       	ldi	r30, 0x2A	; 42
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	88 e1       	ldi	r24, 0x18	; 24
    2230:	80 83       	st	Z, r24
	 * UPM1:0: To choose  parity mode
	 * USBS: To choose number of stop bits
	 * UCSZ1:0 :To choose number of bits in eight bit mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC, URSEL);
    2232:	a0 e4       	ldi	r26, 0x40	; 64
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e0 e4       	ldi	r30, 0x40	; 64
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	80 68       	ori	r24, 0x80	; 128
    223e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_num) << 1);
    2240:	a0 e4       	ldi	r26, 0x40	; 64
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e0 e4       	ldi	r30, 0x40	; 64
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	28 2f       	mov	r18, r24
    224c:	29 7f       	andi	r18, 0xF9	; 249
    224e:	eb 81       	ldd	r30, Y+3	; 0x03
    2250:	fc 81       	ldd	r31, Y+4	; 0x04
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	82 2b       	or	r24, r18
    225e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit) << 3);
    2260:	a0 e4       	ldi	r26, 0x40	; 64
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e0 e4       	ldi	r30, 0x40	; 64
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	28 2f       	mov	r18, r24
    226c:	27 7f       	andi	r18, 0xF7	; 247
    226e:	eb 81       	ldd	r30, Y+3	; 0x03
    2270:	fc 81       	ldd	r31, Y+4	; 0x04
    2272:	81 81       	ldd	r24, Z+1	; 0x01
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	82 2b       	or	r24, r18
    2286:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity) << 4);
    2288:	a0 e4       	ldi	r26, 0x40	; 64
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e0 e4       	ldi	r30, 0x40	; 64
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	28 2f       	mov	r18, r24
    2294:	2f 7c       	andi	r18, 0xCF	; 207
    2296:	eb 81       	ldd	r30, Y+3	; 0x03
    2298:	fc 81       	ldd	r31, Y+4	; 0x04
    229a:	80 81       	ld	r24, Z
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	82 95       	swap	r24
    22a2:	92 95       	swap	r25
    22a4:	90 7f       	andi	r25, 0xF0	; 240
    22a6:	98 27       	eor	r25, r24
    22a8:	80 7f       	andi	r24, 0xF0	; 240
    22aa:	98 27       	eor	r25, r24
    22ac:	82 2b       	or	r24, r18
    22ae:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (((Config_Ptr->rate)) * 8UL))) - 1);
    22b0:	eb 81       	ldd	r30, Y+3	; 0x03
    22b2:	fc 81       	ldd	r31, Y+4	; 0x04
    22b4:	83 81       	ldd	r24, Z+3	; 0x03
    22b6:	94 81       	ldd	r25, Z+4	; 0x04
    22b8:	a5 81       	ldd	r26, Z+5	; 0x05
    22ba:	b6 81       	ldd	r27, Z+6	; 0x06
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	aa 1f       	adc	r26, r26
    22c2:	bb 1f       	adc	r27, r27
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	aa 1f       	adc	r26, r26
    22ca:	bb 1f       	adc	r27, r27
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	aa 1f       	adc	r26, r26
    22d2:	bb 1f       	adc	r27, r27
    22d4:	9c 01       	movw	r18, r24
    22d6:	ad 01       	movw	r20, r26
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	92 e1       	ldi	r25, 0x12	; 18
    22dc:	aa e7       	ldi	r26, 0x7A	; 122
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodsi4>
    22e8:	da 01       	movw	r26, r20
    22ea:	c9 01       	movw	r24, r18
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	9a 83       	std	Y+2, r25	; 0x02
    22f0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    22f2:	e0 e4       	ldi	r30, 0x40	; 64
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	89 2f       	mov	r24, r25
    22fc:	99 27       	eor	r25, r25
    22fe:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2300:	e9 e2       	ldi	r30, 0x29	; 41
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	80 83       	st	Z, r24
}
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	0f 92       	push	r0
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {
    2322:	eb e2       	ldi	r30, 0x2B	; 43
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	80 72       	andi	r24, 0x20	; 32
    232e:	90 70       	andi	r25, 0x00	; 0
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	b9 f3       	breq	.-18     	; 0x2322 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2334:	ec e2       	ldi	r30, 0x2C	; 44
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    234c:	eb e2       	ldi	r30, 0x2B	; 43
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	88 23       	and	r24, r24
    2354:	dc f7       	brge	.-10     	; 0x234c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2356:	ec e2       	ldi	r30, 0x2C	; 44
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
}
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	00 d0       	rcall	.+0      	; 0x2368 <UART_sendString+0x6>
    2368:	0f 92       	push	r0
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	9b 83       	std	Y+3, r25	; 0x03
    2370:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2372:	19 82       	std	Y+1, r1	; 0x01
    2374:	0e c0       	rjmp	.+28     	; 0x2392 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	9b 81       	ldd	r25, Y+3	; 0x03
    2380:	fc 01       	movw	r30, r24
    2382:	e2 0f       	add	r30, r18
    2384:	f3 1f       	adc	r31, r19
    2386:	80 81       	ld	r24, Z
    2388:	0e 94 8b 11 	call	0x2316	; 0x2316 <UART_sendByte>
		i++;
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	8f 5f       	subi	r24, 0xFF	; 255
    2390:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	9b 81       	ldd	r25, Y+3	; 0x03
    239c:	fc 01       	movw	r30, r24
    239e:	e2 0f       	add	r30, r18
    23a0:	f3 1f       	adc	r31, r19
    23a2:	80 81       	ld	r24, Z
    23a4:	88 23       	and	r24, r24
    23a6:	39 f7       	brne	.-50     	; 0x2376 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <UART_receiveString+0xa>
    23be:	0f 92       	push	r0
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	9b 83       	std	Y+3, r25	; 0x03
    23c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23c8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	9b 81       	ldd	r25, Y+3	; 0x03
    23d4:	8c 01       	movw	r16, r24
    23d6:	02 0f       	add	r16, r18
    23d8:	13 1f       	adc	r17, r19
    23da:	0e 94 a2 11 	call	0x2344	; 0x2344 <UART_recieveByte>
    23de:	f8 01       	movw	r30, r16
    23e0:	80 83       	st	Z, r24
    23e2:	0f c0       	rjmp	.+30     	; 0x2402 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	8f 5f       	subi	r24, 0xFF	; 255
    23e8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	9b 81       	ldd	r25, Y+3	; 0x03
    23f4:	8c 01       	movw	r16, r24
    23f6:	02 0f       	add	r16, r18
    23f8:	13 1f       	adc	r17, r19
    23fa:	0e 94 a2 11 	call	0x2344	; 0x2344 <UART_recieveByte>
    23fe:	f8 01       	movw	r30, r16
    2400:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	9b 81       	ldd	r25, Y+3	; 0x03
    240c:	fc 01       	movw	r30, r24
    240e:	e2 0f       	add	r30, r18
    2410:	f3 1f       	adc	r31, r19
    2412:	80 81       	ld	r24, Z
    2414:	83 32       	cpi	r24, 0x23	; 35
    2416:	31 f7       	brne	.-52     	; 0x23e4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	9b 81       	ldd	r25, Y+3	; 0x03
    2422:	fc 01       	movw	r30, r24
    2424:	e2 0f       	add	r30, r18
    2426:	f3 1f       	adc	r31, r19
    2428:	10 82       	st	Z, r1
}
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	1f 91       	pop	r17
    2436:	0f 91       	pop	r16
    2438:	08 95       	ret

0000243a <__udivmodsi4>:
    243a:	a1 e2       	ldi	r26, 0x21	; 33
    243c:	1a 2e       	mov	r1, r26
    243e:	aa 1b       	sub	r26, r26
    2440:	bb 1b       	sub	r27, r27
    2442:	fd 01       	movw	r30, r26
    2444:	0d c0       	rjmp	.+26     	; 0x2460 <__udivmodsi4_ep>

00002446 <__udivmodsi4_loop>:
    2446:	aa 1f       	adc	r26, r26
    2448:	bb 1f       	adc	r27, r27
    244a:	ee 1f       	adc	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	a2 17       	cp	r26, r18
    2450:	b3 07       	cpc	r27, r19
    2452:	e4 07       	cpc	r30, r20
    2454:	f5 07       	cpc	r31, r21
    2456:	20 f0       	brcs	.+8      	; 0x2460 <__udivmodsi4_ep>
    2458:	a2 1b       	sub	r26, r18
    245a:	b3 0b       	sbc	r27, r19
    245c:	e4 0b       	sbc	r30, r20
    245e:	f5 0b       	sbc	r31, r21

00002460 <__udivmodsi4_ep>:
    2460:	66 1f       	adc	r22, r22
    2462:	77 1f       	adc	r23, r23
    2464:	88 1f       	adc	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	1a 94       	dec	r1
    246a:	69 f7       	brne	.-38     	; 0x2446 <__udivmodsi4_loop>
    246c:	60 95       	com	r22
    246e:	70 95       	com	r23
    2470:	80 95       	com	r24
    2472:	90 95       	com	r25
    2474:	9b 01       	movw	r18, r22
    2476:	ac 01       	movw	r20, r24
    2478:	bd 01       	movw	r22, r26
    247a:	cf 01       	movw	r24, r30
    247c:	08 95       	ret

0000247e <__prologue_saves__>:
    247e:	2f 92       	push	r2
    2480:	3f 92       	push	r3
    2482:	4f 92       	push	r4
    2484:	5f 92       	push	r5
    2486:	6f 92       	push	r6
    2488:	7f 92       	push	r7
    248a:	8f 92       	push	r8
    248c:	9f 92       	push	r9
    248e:	af 92       	push	r10
    2490:	bf 92       	push	r11
    2492:	cf 92       	push	r12
    2494:	df 92       	push	r13
    2496:	ef 92       	push	r14
    2498:	ff 92       	push	r15
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	ca 1b       	sub	r28, r26
    24a8:	db 0b       	sbc	r29, r27
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	09 94       	ijmp

000024b6 <__epilogue_restores__>:
    24b6:	2a 88       	ldd	r2, Y+18	; 0x12
    24b8:	39 88       	ldd	r3, Y+17	; 0x11
    24ba:	48 88       	ldd	r4, Y+16	; 0x10
    24bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    24be:	6e 84       	ldd	r6, Y+14	; 0x0e
    24c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    24c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    24c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    24c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    24c8:	b9 84       	ldd	r11, Y+9	; 0x09
    24ca:	c8 84       	ldd	r12, Y+8	; 0x08
    24cc:	df 80       	ldd	r13, Y+7	; 0x07
    24ce:	ee 80       	ldd	r14, Y+6	; 0x06
    24d0:	fd 80       	ldd	r15, Y+5	; 0x05
    24d2:	0c 81       	ldd	r16, Y+4	; 0x04
    24d4:	1b 81       	ldd	r17, Y+3	; 0x03
    24d6:	aa 81       	ldd	r26, Y+2	; 0x02
    24d8:	b9 81       	ldd	r27, Y+1	; 0x01
    24da:	ce 0f       	add	r28, r30
    24dc:	d1 1d       	adc	r29, r1
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	ed 01       	movw	r28, r26
    24ea:	08 95       	ret

000024ec <_exit>:
    24ec:	f8 94       	cli

000024ee <__stop_program>:
    24ee:	ff cf       	rjmp	.-2      	; 0x24ee <__stop_program>
